import CMySQL

/// A list of all Error messages that
/// can be thrown from calls to `Database`.
///
/// All Error objects contain a String which
/// contains MySQL's last error message.
public struct MySQLError: Error {
    public let code: Code
    public let reason: String
}

extension MySQLError {
    public enum Code: UInt32 {
        case serverInit = 1
        case hashchk = 1000 // ER_HASHCHK
        case nisamchk = 1001 // ER_NISAMCHK
        case no = 1002 // ER_NO
        case yes = 1003 // ER_YES
        case cantCreateFile = 1004 // ER_CANT_CREATE_FILE
        case cantCreateTable = 1005 // ER_CANT_CREATE_TABLE
        case cantCreateDb = 1006 // ER_CANT_CREATE_DB
        case dbCreateExists = 1007 // ER_DB_CREATE_EXISTS
        case dbDropExists = 1008 // ER_DB_DROP_EXISTS
        case dbDropDelete = 1009 // ER_DB_DROP_DELETE
        case dbDropRmdir = 1010 // ER_DB_DROP_RMDIR
        case cantDeleteFile = 1011 // ER_CANT_DELETE_FILE
        case cantFindSystemRec = 1012 // ER_CANT_FIND_SYSTEM_REC
        case cantGetStat = 1013 // ER_CANT_GET_STAT
        case cantGetWd = 1014 // ER_CANT_GET_WD
        case cantLock = 1015 // ER_CANT_LOCK
        case cantOpenFile = 1016 // ER_CANT_OPEN_FILE
        case fileNotFound = 1017 // ER_FILE_NOT_FOUND
        case cantReadDir = 1018 // ER_CANT_READ_DIR
        case cantSetWd = 1019 // ER_CANT_SET_WD
        case checkread = 1020 // ER_CHECKREAD
        case diskFull = 1021 // ER_DISK_FULL
        case dupKey = 1022 // ER_DUP_KEY
        case errorOnClose = 1023 // ER_ERROR_ON_CLOSE
        case errorOnRead = 1024 // ER_ERROR_ON_READ
        case errorOnRename = 1025 // ER_ERROR_ON_RENAME
        case errorOnWrite = 1026 // ER_ERROR_ON_WRITE
        case fileUsed = 1027 // ER_FILE_USED
        case filsortAbort = 1028 // ER_FILSORT_ABORT
        case formNotFound = 1029 // ER_FORM_NOT_FOUND
        case getErrno = 1030 // ER_GET_ERRNO
        case illegalHa = 1031 // ER_ILLEGAL_HA
        case keyNotFound = 1032 // ER_KEY_NOT_FOUND
        case notFormFile = 1033 // ER_NOT_FORM_FILE
        case notKeyfile = 1034 // ER_NOT_KEYFILE
        case oldKeyfile = 1035 // ER_OLD_KEYFILE
        case openAsReadonly = 1036 // ER_OPEN_AS_READONLY
        case outofmemory = 1037 // ER_OUTOFMEMORY
        case outOfSortmemory = 1038 // ER_OUT_OF_SORTMEMORY
        case unexpectedEof = 1039 // ER_UNEXPECTED_EOF
        case conCountError = 1040 // ER_CON_COUNT_ERROR
        case outOfResources = 1041 // ER_OUT_OF_RESOURCES
        case badHostError = 1042 // ER_BAD_HOST_ERROR
        case handshakeError = 1043 // ER_HANDSHAKE_ERROR
        case dbaccessDeniedError = 1044 // ER_DBACCESS_DENIED_ERROR
        case accessDeniedError = 1045 // ER_ACCESS_DENIED_ERROR
        case noDbError = 1046 // ER_NO_DB_ERROR
        case unknownComError = 1047 // ER_UNKNOWN_COM_ERROR
        case badNullError = 1048 // ER_BAD_NULL_ERROR
        case badDbError = 1049 // ER_BAD_DB_ERROR
        case tableExistsError = 1050 // ER_TABLE_EXISTS_ERROR
        case badTableError = 1051 // ER_BAD_TABLE_ERROR
        case nonUniqError = 1052 // ER_NON_UNIQ_ERROR
        case serverShutdown = 1053 // ER_SERVER_SHUTDOWN
        case badFieldError = 1054 // ER_BAD_FIELD_ERROR
        case wrongFieldWithGroup = 1055 // ER_WRONG_FIELD_WITH_GROUP
        case wrongGroupField = 1056 // ER_WRONG_GROUP_FIELD
        case wrongSumSelect = 1057 // ER_WRONG_SUM_SELECT
        case wrongValueCount = 1058 // ER_WRONG_VALUE_COUNT
        case tooLongIdent = 1059 // ER_TOO_LONG_IDENT
        case dupFieldname = 1060 // ER_DUP_FIELDNAME
        case dupKeyname = 1061 // ER_DUP_KEYNAME
        case dupEntry = 1062 // ER_DUP_ENTRY
        case wrongFieldSpec = 1063 // ER_WRONG_FIELD_SPEC
        case parseError = 1064 // ER_PARSE_ERROR
        case emptyQuery = 1065 // ER_EMPTY_QUERY
        case nonuniqTable = 1066 // ER_NONUNIQ_TABLE
        case invalidDefault = 1067 // ER_INVALID_DEFAULT
        case multiplePriKey = 1068 // ER_MULTIPLE_PRI_KEY
        case tooManyKeys = 1069 // ER_TOO_MANY_KEYS
        case tooManyKeyParts = 1070 // ER_TOO_MANY_KEY_PARTS
        case tooLongKey = 1071 // ER_TOO_LONG_KEY
        case keyColumnDoesNotExits = 1072 // ER_KEY_COLUMN_DOES_NOT_EXITS
        case blobUsedAsKey = 1073 // ER_BLOB_USED_AS_KEY
        case tooBigFieldlength = 1074 // ER_TOO_BIG_FIELDLENGTH
        case wrongAutoKey = 1075 // ER_WRONG_AUTO_KEY
        case ready = 1076 // ER_READY
        case normalShutdown = 1077 // ER_NORMAL_SHUTDOWN
        case gotSignal = 1078 // ER_GOT_SIGNAL
        case shutdownComplete = 1079 // ER_SHUTDOWN_COMPLETE
        case forcingClose = 1080 // ER_FORCING_CLOSE
        case ipsockError = 1081 // ER_IPSOCK_ERROR
        case noSuchIndex = 1082 // ER_NO_SUCH_INDEX
        case wrongFieldTerminators = 1083 // ER_WRONG_FIELD_TERMINATORS
        case blobsAndNoTerminated = 1084 // ER_BLOBS_AND_NO_TERMINATED
        case textfileNotReadable = 1085 // ER_TEXTFILE_NOT_READABLE
        case fileExistsError = 1086 // ER_FILE_EXISTS_ERROR
        case loadInfo = 1087 // ER_LOAD_INFO
        case alterInfo = 1088 // ER_ALTER_INFO
        case wrongSubKey = 1089 // ER_WRONG_SUB_KEY
        case cantRemoveAllFields = 1090 // ER_CANT_REMOVE_ALL_FIELDS
        case cantDropFieldOrKey = 1091 // ER_CANT_DROP_FIELD_OR_KEY
        case insertInfo = 1092 // ER_INSERT_INFO
        case updateTableUsed = 1093 // ER_UPDATE_TABLE_USED
        case noSuchThread = 1094 // ER_NO_SUCH_THREAD
        case killDeniedError = 1095 // ER_KILL_DENIED_ERROR
        case noTablesUsed = 1096 // ER_NO_TABLES_USED
        case tooBigSet = 1097 // ER_TOO_BIG_SET
        case noUniqueLogfile = 1098 // ER_NO_UNIQUE_LOGFILE
        case tableNotLockedForWrite = 1099 // ER_TABLE_NOT_LOCKED_FOR_WRITE
        case tableNotLocked = 1100 // ER_TABLE_NOT_LOCKED
        case blobCantHaveDefault = 1101 // ER_BLOB_CANT_HAVE_DEFAULT
        case wrongDbName = 1102 // ER_WRONG_DB_NAME
        case wrongTableName = 1103 // ER_WRONG_TABLE_NAME
        case tooBigSelect = 1104 // ER_TOO_BIG_SELECT
        case unknownError = 1105 // ER_UNKNOWN_ERROR
        case unknownProcedure = 1106 // ER_UNKNOWN_PROCEDURE
        case wrongParamcountToProcedure = 1107 // ER_WRONG_PARAMCOUNT_TO_PROCEDURE
        case wrongParametersToProcedure = 1108 // ER_WRONG_PARAMETERS_TO_PROCEDURE
        case unknownTable = 1109 // ER_UNKNOWN_TABLE
        case fieldSpecifiedTwice = 1110 // ER_FIELD_SPECIFIED_TWICE
        case invalidGroupFuncUse = 1111 // ER_INVALID_GROUP_FUNC_USE
        case unsupportedExtension = 1112 // ER_UNSUPPORTED_EXTENSION
        case tableMustHaveColumns = 1113 // ER_TABLE_MUST_HAVE_COLUMNS
        case recordFileFull = 1114 // ER_RECORD_FILE_FULL
        case unknownCharacterSet = 1115 // ER_UNKNOWN_CHARACTER_SET
        case tooManyTables = 1116 // ER_TOO_MANY_TABLES
        case tooManyFields = 1117 // ER_TOO_MANY_FIELDS
        case tooBigRowsize = 1118 // ER_TOO_BIG_ROWSIZE
        case stackOverrun = 1119 // ER_STACK_OVERRUN
        case wrongOuterJoin = 1120 // ER_WRONG_OUTER_JOIN
        case nullColumnInIndex = 1121 // ER_NULL_COLUMN_IN_INDEX
        case cantFindUdf = 1122 // ER_CANT_FIND_UDF
        case cantInitializeUdf = 1123 // ER_CANT_INITIALIZE_UDF
        case udfNoPaths = 1124 // ER_UDF_NO_PATHS
        case udfExists = 1125 // ER_UDF_EXISTS
        case cantOpenLibrary = 1126 // ER_CANT_OPEN_LIBRARY
        case cantFindDlEntry = 1127 // ER_CANT_FIND_DL_ENTRY
        case functionNotDefined = 1128 // ER_FUNCTION_NOT_DEFINED
        case hostIsBlocked = 1129 // ER_HOST_IS_BLOCKED
        case hostNotPrivileged = 1130 // ER_HOST_NOT_PRIVILEGED
        case passwordAnonymousUser = 1131 // ER_PASSWORD_ANONYMOUS_USER
        case passwordNotAllowed = 1132 // ER_PASSWORD_NOT_ALLOWED
        case passwordNoMatch = 1133 // ER_PASSWORD_NO_MATCH
        case updateInfo = 1134 // ER_UPDATE_INFO
        case cantCreateThread = 1135 // ER_CANT_CREATE_THREAD
        case wrongValueCountOnRow = 1136 // ER_WRONG_VALUE_COUNT_ON_ROW
        case cantReopenTable = 1137 // ER_CANT_REOPEN_TABLE
        case invalidUseOfNull = 1138 // ER_INVALID_USE_OF_NULL
        case regexpError = 1139 // ER_REGEXP_ERROR
        case mixOfGroupFuncAndFields = 1140 // ER_MIX_OF_GROUP_FUNC_AND_FIELDS
        case nonexistingGrant = 1141 // ER_NONEXISTING_GRANT
        case tableaccessDeniedError = 1142 // ER_TABLEACCESS_DENIED_ERROR
        case columnaccessDeniedError = 1143 // ER_COLUMNACCESS_DENIED_ERROR
        case illegalGrantForTable = 1144 // ER_ILLEGAL_GRANT_FOR_TABLE
        case grantWrongHostOrUser = 1145 // ER_GRANT_WRONG_HOST_OR_USER
        case noSuchTable = 1146 // ER_NO_SUCH_TABLE
        case nonexistingTableGrant = 1147 // ER_NONEXISTING_TABLE_GRANT
        case notAllowedCommand = 1148 // ER_NOT_ALLOWED_COMMAND
        case syntaxError = 1149 // ER_SYNTAX_ERROR
        case unused1  = 1150 // ER_UNUSED1
        case unused2  = 1151 // ER_UNUSED2
        case abortingConnection = 1152 // ER_ABORTING_CONNECTION
        case netPacketTooLarge = 1153 // ER_NET_PACKET_TOO_LARGE
        case netReadErrorFromPipe = 1154 // ER_NET_READ_ERROR_FROM_PIPE
        case netFcntlError = 1155 // ER_NET_FCNTL_ERROR
        case netPacketsOutOfOrder = 1156 // ER_NET_PACKETS_OUT_OF_ORDER
        case netUncompressError = 1157 // ER_NET_UNCOMPRESS_ERROR
        case netReadError = 1158 // ER_NET_READ_ERROR
        case netReadInterrupted = 1159 // ER_NET_READ_INTERRUPTED
        case netErrorOnWrite = 1160 // ER_NET_ERROR_ON_WRITE
        case netWriteInterrupted = 1161 // ER_NET_WRITE_INTERRUPTED
        case tooLongString = 1162 // ER_TOO_LONG_STRING
        case tableCantHandleBlob = 1163 // ER_TABLE_CANT_HANDLE_BLOB
        case tableCantHandleAutoIncrement = 1164 // ER_TABLE_CANT_HANDLE_AUTO_INCREMENT
        case unused3  = 1165 // ER_UNUSED3
        case wrongColumnName = 1166 // ER_WRONG_COLUMN_NAME
        case wrongKeyColumn = 1167 // ER_WRONG_KEY_COLUMN
        case wrongMrgTable = 1168 // ER_WRONG_MRG_TABLE
        case dupUnique = 1169 // ER_DUP_UNIQUE
        case blobKeyWithoutLength = 1170 // ER_BLOB_KEY_WITHOUT_LENGTH
        case primaryCantHaveNull = 1171 // ER_PRIMARY_CANT_HAVE_NULL
        case tooManyRows = 1172 // ER_TOO_MANY_ROWS
        case requiresPrimaryKey = 1173 // ER_REQUIRES_PRIMARY_KEY
        case noRaidCompiled = 1174 // ER_NO_RAID_COMPILED
        case updateWithoutKeyInSafeMode = 1175 // ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE
        case keyDoesNotExits = 1176 // ER_KEY_DOES_NOT_EXITS
        case checkNoSuchTable = 1177 // ER_CHECK_NO_SUCH_TABLE
        case checkNotImplemented = 1178 // ER_CHECK_NOT_IMPLEMENTED
        case cantDoThisDuringAnTransaction = 1179 // ER_CANT_DO_THIS_DURING_AN_TRANSACTION
        case errorDuringCommit = 1180 // ER_ERROR_DURING_COMMIT
        case errorDuringRollback = 1181 // ER_ERROR_DURING_ROLLBACK
        case errorDuringFlushLogs = 1182 // ER_ERROR_DURING_FLUSH_LOGS
        case errorDuringCheckpoint = 1183 // ER_ERROR_DURING_CHECKPOINT
        case newAbortingConnection = 1184 // ER_NEW_ABORTING_CONNECTION
        case dumpNotImplemented = 1185 // ER_DUMP_NOT_IMPLEMENTED
        case flushMasterBinlogClosed = 1186 // ER_FLUSH_MASTER_BINLOG_CLOSED
        case indexRebuild = 1187 // ER_INDEX_REBUILD
        case master = 1188 // ER_MASTER
        case masterNetRead = 1189 // ER_MASTER_NET_READ
        case masterNetWrite = 1190 // ER_MASTER_NET_WRITE
        case ftMatchingKeyNotFound = 1191 // ER_FT_MATCHING_KEY_NOT_FOUND
        case lockOrActiveTransaction = 1192 // ER_LOCK_OR_ACTIVE_TRANSACTION
        case unknownSystemVariable = 1193 // ER_UNKNOWN_SYSTEM_VARIABLE
        case crashedOnUsage = 1194 // ER_CRASHED_ON_USAGE
        case crashedOnRepair = 1195 // ER_CRASHED_ON_REPAIR
        case warningNotCompleteRollback = 1196 // ER_WARNING_NOT_COMPLETE_ROLLBACK
        case transCacheFull = 1197 // ER_TRANS_CACHE_FULL
        case slaveMustStop = 1198 // ER_SLAVE_MUST_STOP
        case slaveNotRunning = 1199 // ER_SLAVE_NOT_RUNNING
        case badSlave = 1200 // ER_BAD_SLAVE
        case masterInfo = 1201 // ER_MASTER_INFO
        case slaveThread = 1202 // ER_SLAVE_THREAD
        case tooManyUserConnections = 1203 // ER_TOO_MANY_USER_CONNECTIONS
        case setConstantsOnly = 1204 // ER_SET_CONSTANTS_ONLY
        case lockWaitTimeout = 1205 // ER_LOCK_WAIT_TIMEOUT
        case lockTableFull = 1206 // ER_LOCK_TABLE_FULL
        case readOnlyTransaction = 1207 // ER_READ_ONLY_TRANSACTION
        case dropDbWithReadLock = 1208 // ER_DROP_DB_WITH_READ_LOCK
        case createDbWithReadLock = 1209 // ER_CREATE_DB_WITH_READ_LOCK
        case wrongArguments = 1210 // ER_WRONG_ARGUMENTS
        case noPermissionToCreateUser = 1211 // ER_NO_PERMISSION_TO_CREATE_USER
        case unionTablesInDifferentDir = 1212 // ER_UNION_TABLES_IN_DIFFERENT_DIR
        case lockDeadlock = 1213 // ER_LOCK_DEADLOCK
        case tableCantHandleFt = 1214 // ER_TABLE_CANT_HANDLE_FT
        case cannotAddForeign = 1215 // ER_CANNOT_ADD_FOREIGN
        case noReferencedRow = 1216 // ER_NO_REFERENCED_ROW
        case rowIsReferenced = 1217 // ER_ROW_IS_REFERENCED
        case connectToMaster = 1218 // ER_CONNECT_TO_MASTER
        case queryOnMaster = 1219 // ER_QUERY_ON_MASTER
        case errorWhenExecutingCommand = 1220 // ER_ERROR_WHEN_EXECUTING_COMMAND
        case wrongUsage = 1221 // ER_WRONG_USAGE
        case wrongNumberOfColumnsInSelect = 1222 // ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT
        case cantUpdateWithReadlock = 1223 // ER_CANT_UPDATE_WITH_READLOCK
        case mixingNotAllowed = 1224 // ER_MIXING_NOT_ALLOWED
        case dupArgument = 1225 // ER_DUP_ARGUMENT
        case userLimitReached = 1226 // ER_USER_LIMIT_REACHED
        case specificAccessDeniedError = 1227 // ER_SPECIFIC_ACCESS_DENIED_ERROR
        case localVariable = 1228 // ER_LOCAL_VARIABLE
        case globalVariable = 1229 // ER_GLOBAL_VARIABLE
        case noDefault = 1230 // ER_NO_DEFAULT
        case wrongValueForVar = 1231 // ER_WRONG_VALUE_FOR_VAR
        case wrongTypeForVar = 1232 // ER_WRONG_TYPE_FOR_VAR
        case varCantBeRead = 1233 // ER_VAR_CANT_BE_READ
        case cantUseOptionHere = 1234 // ER_CANT_USE_OPTION_HERE
        case notSupportedYet = 1235 // ER_NOT_SUPPORTED_YET
        case masterFatalErrorReadingBinlog = 1236 // ER_MASTER_FATAL_ERROR_READING_BINLOG
        case slaveIgnoredTable = 1237 // ER_SLAVE_IGNORED_TABLE
        case incorrectGlobalLocalVar = 1238 // ER_INCORRECT_GLOBAL_LOCAL_VAR
        case wrongFkDef = 1239 // ER_WRONG_FK_DEF
        case keyRefDoNotMatchTableRef = 1240 // ER_KEY_REF_DO_NOT_MATCH_TABLE_REF
        case operandColumns = 1241 // ER_OPERAND_COLUMNS
        case subqueryNo1Row = 1242 // ER_SUBQUERY_NO_1_ROW
        case unknownStmtHandler = 1243 // ER_UNKNOWN_STMT_HANDLER
        case corruptHelpDb = 1244 // ER_CORRUPT_HELP_DB
        case cyclicReference = 1245 // ER_CYCLIC_REFERENCE
        case autoConvert = 1246 // ER_AUTO_CONVERT
        case illegalReference = 1247 // ER_ILLEGAL_REFERENCE
        case derivedMustHaveAlias = 1248 // ER_DERIVED_MUST_HAVE_ALIAS
        case selectReduced = 1249 // ER_SELECT_REDUCED
        case tablenameNotAllowedHere = 1250 // ER_TABLENAME_NOT_ALLOWED_HERE
        case notSupportedAuthMode = 1251 // ER_NOT_SUPPORTED_AUTH_MODE
        case spatialCantHaveNull = 1252 // ER_SPATIAL_CANT_HAVE_NULL
        case collationCharsetMismatch = 1253 // ER_COLLATION_CHARSET_MISMATCH
        case slaveWasRunning = 1254 // ER_SLAVE_WAS_RUNNING
        case slaveWasNotRunning = 1255 // ER_SLAVE_WAS_NOT_RUNNING
        case tooBigForUncompress = 1256 // ER_TOO_BIG_FOR_UNCOMPRESS
        case zlibZMemError = 1257 // ER_ZLIB_Z_MEM_ERROR
        case zlibZBufError = 1258 // ER_ZLIB_Z_BUF_ERROR
        case zlibZDataError = 1259 // ER_ZLIB_Z_DATA_ERROR
        case cutValueGroupConcat = 1260 // ER_CUT_VALUE_GROUP_CONCAT
        case warnTooFewRecords = 1261 // ER_WARN_TOO_FEW_RECORDS
        case warnTooManyRecords = 1262 // ER_WARN_TOO_MANY_RECORDS
        case warnNullToNotnull = 1263 // ER_WARN_NULL_TO_NOTNULL
        case warnDataOutOfRange = 1264 // ER_WARN_DATA_OUT_OF_RANGE
        case rnDataTruncated = 1265 // WARN_DATA_TRUNCATED
        case warnUsingOtherHandler = 1266 // ER_WARN_USING_OTHER_HANDLER
        case cantAggregate2collations = 1267 // ER_CANT_AGGREGATE_2COLLATIONS
        case dropUser = 1268 // ER_DROP_USER
        case revokeGrants = 1269 // ER_REVOKE_GRANTS
        case cantAggregate3collations = 1270 // ER_CANT_AGGREGATE_3COLLATIONS
        case cantAggregateNcollations = 1271 // ER_CANT_AGGREGATE_NCOLLATIONS
        case variableIsNotStruct = 1272 // ER_VARIABLE_IS_NOT_STRUCT
        case unknownCollation = 1273 // ER_UNKNOWN_COLLATION
        case slaveIgnoredSslParams = 1274 // ER_SLAVE_IGNORED_SSL_PARAMS
        case serverIsInSecureAuthMode = 1275 // ER_SERVER_IS_IN_SECURE_AUTH_MODE
        case warnFieldResolved = 1276 // ER_WARN_FIELD_RESOLVED
        case badSlaveUntilCond = 1277 // ER_BAD_SLAVE_UNTIL_COND
        case missingSkipSlave = 1278 // ER_MISSING_SKIP_SLAVE
        case untilCondIgnored = 1279 // ER_UNTIL_COND_IGNORED
        case wrongNameForIndex = 1280 // ER_WRONG_NAME_FOR_INDEX
        case wrongNameForCatalog = 1281 // ER_WRONG_NAME_FOR_CATALOG
        case warnQcResize = 1282 // ER_WARN_QC_RESIZE
        case badFtColumn = 1283 // ER_BAD_FT_COLUMN
        case unknownKeyCache = 1284 // ER_UNKNOWN_KEY_CACHE
        case warnHostnameWontWork = 1285 // ER_WARN_HOSTNAME_WONT_WORK
        case unknownStorageEngine = 1286 // ER_UNKNOWN_STORAGE_ENGINE
        case warnDeprecatedSyntax = 1287 // ER_WARN_DEPRECATED_SYNTAX
        case nonUpdatableTable = 1288 // ER_NON_UPDATABLE_TABLE
        case featureDisabled = 1289 // ER_FEATURE_DISABLED
        case optionPreventsStatement = 1290 // ER_OPTION_PREVENTS_STATEMENT
        case duplicatedValueInType = 1291 // ER_DUPLICATED_VALUE_IN_TYPE
        case truncatedWrongValue = 1292 // ER_TRUNCATED_WRONG_VALUE
        case tooMuchAutoTimestampCols = 1293 // ER_TOO_MUCH_AUTO_TIMESTAMP_COLS
        case invalidOnUpdate = 1294 // ER_INVALID_ON_UPDATE
        case unsupportedPs = 1295 // ER_UNSUPPORTED_PS
        case getErrmsg = 1296 // ER_GET_ERRMSG
        case getTemporaryErrmsg = 1297 // ER_GET_TEMPORARY_ERRMSG
        case unknownTimeZone = 1298 // ER_UNKNOWN_TIME_ZONE
        case warnInvalidTimestamp = 1299 // ER_WARN_INVALID_TIMESTAMP
        case invalidCharacterString = 1300 // ER_INVALID_CHARACTER_STRING
        case warnAllowedPacketOverflowed = 1301 // ER_WARN_ALLOWED_PACKET_OVERFLOWED
        case conflictingDeclarations = 1302 // ER_CONFLICTING_DECLARATIONS
        case spNoRecursiveCreate = 1303 // ER_SP_NO_RECURSIVE_CREATE
        case spAlreadyExists = 1304 // ER_SP_ALREADY_EXISTS
        case spDoesNotExist = 1305 // ER_SP_DOES_NOT_EXIST
        case spDropFailed = 1306 // ER_SP_DROP_FAILED
        case spStoreFailed = 1307 // ER_SP_STORE_FAILED
        case spLilabelMismatch = 1308 // ER_SP_LILABEL_MISMATCH
        case spLabelRedefine = 1309 // ER_SP_LABEL_REDEFINE
        case spLabelMismatch = 1310 // ER_SP_LABEL_MISMATCH
        case spUninitVar = 1311 // ER_SP_UNINIT_VAR
        case spBadselect = 1312 // ER_SP_BADSELECT
        case spBadreturn = 1313 // ER_SP_BADRETURN
        case spBadstatement = 1314 // ER_SP_BADSTATEMENT
        case updateLogDeprecatedIgnored = 1315 // ER_UPDATE_LOG_DEPRECATED_IGNORED
        case updateLogDeprecatedTranslated = 1316 // ER_UPDATE_LOG_DEPRECATED_TRANSLATED
        case queryInterrupted = 1317 // ER_QUERY_INTERRUPTED
        case spWrongNoOfArgs = 1318 // ER_SP_WRONG_NO_OF_ARGS
        case spCondMismatch = 1319 // ER_SP_COND_MISMATCH
        case spNoreturn = 1320 // ER_SP_NORETURN
        case spNoreturnend = 1321 // ER_SP_NORETURNEND
        case spBadCursorQuery = 1322 // ER_SP_BAD_CURSOR_QUERY
        case spBadCursorSelect = 1323 // ER_SP_BAD_CURSOR_SELECT
        case spCursorMismatch = 1324 // ER_SP_CURSOR_MISMATCH
        case spCursorAlreadyOpen = 1325 // ER_SP_CURSOR_ALREADY_OPEN
        case spCursorNotOpen = 1326 // ER_SP_CURSOR_NOT_OPEN
        case spUndeclaredVar = 1327 // ER_SP_UNDECLARED_VAR
        case spWrongNoOfFetchArgs = 1328 // ER_SP_WRONG_NO_OF_FETCH_ARGS
        case spFetchNoData = 1329 // ER_SP_FETCH_NO_DATA
        case spDupParam = 1330 // ER_SP_DUP_PARAM
        case spDupVar = 1331 // ER_SP_DUP_VAR
        case spDupCond = 1332 // ER_SP_DUP_COND
        case spDupCurs = 1333 // ER_SP_DUP_CURS
        case spCantAlter = 1334 // ER_SP_CANT_ALTER
        case spSubselectNyi = 1335 // ER_SP_SUBSELECT_NYI
        case stmtNotAllowedInSfOrTrg = 1336 // ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG
        case spVarcondAfterCurshndlr = 1337 // ER_SP_VARCOND_AFTER_CURSHNDLR
        case spCursorAfterHandler = 1338 // ER_SP_CURSOR_AFTER_HANDLER
        case tFound = 1339 // NOT_FOUND
        case fparserTooBigFile = 1340 // ER_FPARSER_TOO_BIG_FILE
        case fparserBadHeader = 1341 // ER_FPARSER_BAD_HEADER
        case fparserEofInComment = 1342 // ER_FPARSER_EOF_IN_COMMENT
        case fparserErrorInParameter = 1343 // ER_FPARSER_ERROR_IN_PARAMETER
        case fparserEofInUnknownParameter = 1344 // ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER
        case viewNoExplain = 1345 // ER_VIEW_NO_EXPLAIN
        case frmUnknownType = 1346 // ER_FRM_UNKNOWN_TYPE
        case wrongObject = 1347 // ER_WRONG_OBJECT
        case nonupdateableColumn = 1348 // ER_NONUPDATEABLE_COLUMN
        case viewSelectDerivedUnused = 1349 // ER_VIEW_SELECT_DERIVED_UNUSED
        case viewSelectClause = 1350 // ER_VIEW_SELECT_CLAUSE
        case viewSelectVariable = 1351 // ER_VIEW_SELECT_VARIABLE
        case viewSelectTmptable = 1352 // ER_VIEW_SELECT_TMPTABLE
        case viewWrongList = 1353 // ER_VIEW_WRONG_LIST
        case warnViewMerge = 1354 // ER_WARN_VIEW_MERGE
        case warnViewWithoutKey = 1355 // ER_WARN_VIEW_WITHOUT_KEY
        case viewInvalid = 1356 // ER_VIEW_INVALID
        case spNoDropSp = 1357 // ER_SP_NO_DROP_SP
        case spGotoInHndlr = 1358 // ER_SP_GOTO_IN_HNDLR
        case trgAlreadyExists = 1359 // ER_TRG_ALREADY_EXISTS
        case trgDoesNotExist = 1360 // ER_TRG_DOES_NOT_EXIST
        case trgOnViewOrTempTable = 1361 // ER_TRG_ON_VIEW_OR_TEMP_TABLE
        case trgCantChangeRow = 1362 // ER_TRG_CANT_CHANGE_ROW
        case trgNoSuchRowInTrg = 1363 // ER_TRG_NO_SUCH_ROW_IN_TRG
        case noDefaultForField = 1364 // ER_NO_DEFAULT_FOR_FIELD
        case divisionByZero = 1365 // ER_DIVISION_BY_ZERO
        case truncatedWrongValueForField = 1366 // ER_TRUNCATED_WRONG_VALUE_FOR_FIELD
        case illegalValueForType = 1367 // ER_ILLEGAL_VALUE_FOR_TYPE
        case viewNonupdCheck = 1368 // ER_VIEW_NONUPD_CHECK
        case viewCheckFailed = 1369 // ER_VIEW_CHECK_FAILED
        case procaccessDeniedError = 1370 // ER_PROCACCESS_DENIED_ERROR
        case relayLogFail = 1371 // ER_RELAY_LOG_FAIL
        case passwdLength = 1372 // ER_PASSWD_LENGTH
        case unknownTargetBinlog = 1373 // ER_UNKNOWN_TARGET_BINLOG
        case ioErrLogIndexRead = 1374 // ER_IO_ERR_LOG_INDEX_READ
        case binlogPurgeProhibited = 1375 // ER_BINLOG_PURGE_PROHIBITED
        case fseekFail = 1376 // ER_FSEEK_FAIL
        case binlogPurgeFatalErr = 1377 // ER_BINLOG_PURGE_FATAL_ERR
        case logInUse = 1378 // ER_LOG_IN_USE
        case logPurgeUnknownErr = 1379 // ER_LOG_PURGE_UNKNOWN_ERR
        case relayLogInit = 1380 // ER_RELAY_LOG_INIT
        case noBinaryLogging = 1381 // ER_NO_BINARY_LOGGING
        case reservedSyntax = 1382 // ER_RESERVED_SYNTAX
        case wsasFailed = 1383 // ER_WSAS_FAILED
        case diffGroupsProc = 1384 // ER_DIFF_GROUPS_PROC
        case noGroupForProc = 1385 // ER_NO_GROUP_FOR_PROC
        case orderWithProc = 1386 // ER_ORDER_WITH_PROC
        case loggingProhibitChangingOf = 1387 // ER_LOGGING_PROHIBIT_CHANGING_OF
        case noFileMapping = 1388 // ER_NO_FILE_MAPPING
        case wrongMagic = 1389 // ER_WRONG_MAGIC
        case psManyParam = 1390 // ER_PS_MANY_PARAM
        case keyPart0  = 1391 // ER_KEY_PART_0
        case viewChecksum = 1392 // ER_VIEW_CHECKSUM
        case viewMultiupdate = 1393 // ER_VIEW_MULTIUPDATE
        case viewNoInsertFieldList = 1394 // ER_VIEW_NO_INSERT_FIELD_LIST
        case viewDeleteMergeView = 1395 // ER_VIEW_DELETE_MERGE_VIEW
        case cannotUser = 1396 // ER_CANNOT_USER
        case xaerNota = 1397 // ER_XAER_NOTA
        case xaerInval = 1398 // ER_XAER_INVAL
        case xaerRmfail = 1399 // ER_XAER_RMFAIL
        case xaerOutside = 1400 // ER_XAER_OUTSIDE
        case xaerRmerr = 1401 // ER_XAER_RMERR
        case xaRbrollback = 1402 // ER_XA_RBROLLBACK
        case nonexistingProcGrant = 1403 // ER_NONEXISTING_PROC_GRANT
        case procAutoGrantFail = 1404 // ER_PROC_AUTO_GRANT_FAIL
        case procAutoRevokeFail = 1405 // ER_PROC_AUTO_REVOKE_FAIL
        case dataTooLong = 1406 // ER_DATA_TOO_LONG
        case spBadSqlstate = 1407 // ER_SP_BAD_SQLSTATE
        case startup = 1408 // ER_STARTUP
        case loadFromFixedSizeRowsToVar = 1409 // ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR
        case cantCreateUserWithGrant = 1410 // ER_CANT_CREATE_USER_WITH_GRANT
        case wrongValueForType = 1411 // ER_WRONG_VALUE_FOR_TYPE
        case tableDefChanged = 1412 // ER_TABLE_DEF_CHANGED
        case spDupHandler = 1413 // ER_SP_DUP_HANDLER
        case spNotVarArg = 1414 // ER_SP_NOT_VAR_ARG
        case spNoRetset = 1415 // ER_SP_NO_RETSET
        case cantCreateGeometryObject = 1416 // ER_CANT_CREATE_GEOMETRY_OBJECT
        case failedRoutineBreakBinlog = 1417 // ER_FAILED_ROUTINE_BREAK_BINLOG
        case binlogUnsafeRoutine = 1418 // ER_BINLOG_UNSAFE_ROUTINE
        case binlogCreateRoutineNeedSuper = 1419 // ER_BINLOG_CREATE_ROUTINE_NEED_SUPER
        case execStmtWithOpenCursor = 1420 // ER_EXEC_STMT_WITH_OPEN_CURSOR
        case stmtHasNoOpenCursor = 1421 // ER_STMT_HAS_NO_OPEN_CURSOR
        case commitNotAllowedInSfOrTrg = 1422 // ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG
        case noDefaultForViewField = 1423 // ER_NO_DEFAULT_FOR_VIEW_FIELD
        case spNoRecursion = 1424 // ER_SP_NO_RECURSION
        case tooBigScale = 1425 // ER_TOO_BIG_SCALE
        case tooBigPrecision = 1426 // ER_TOO_BIG_PRECISION
        case mBiggerThanD = 1427 // ER_M_BIGGER_THAN_D
        case wrongLockOfSystemTable = 1428 // ER_WRONG_LOCK_OF_SYSTEM_TABLE
        case connectToForeignDataSource = 1429 // ER_CONNECT_TO_FOREIGN_DATA_SOURCE
        case queryOnForeignDataSource = 1430 // ER_QUERY_ON_FOREIGN_DATA_SOURCE
        case foreignDataSourceDoesntExist = 1431 // ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST
        case foreignDataStringInvalidCantCreate = 1432 // ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE
        case foreignDataStringInvalid = 1433 // ER_FOREIGN_DATA_STRING_INVALID
        case cantCreateFederatedTable = 1434 // ER_CANT_CREATE_FEDERATED_TABLE
        case trgInWrongSchema = 1435 // ER_TRG_IN_WRONG_SCHEMA
        case stackOverrunNeedMore = 1436 // ER_STACK_OVERRUN_NEED_MORE
        case tooLongBody = 1437 // ER_TOO_LONG_BODY
        case warnCantDropDefaultKeycache = 1438 // ER_WARN_CANT_DROP_DEFAULT_KEYCACHE
        case tooBigDisplaywidth = 1439 // ER_TOO_BIG_DISPLAYWIDTH
        case xaerDupid = 1440 // ER_XAER_DUPID
        case datetimeFunctionOverflow = 1441 // ER_DATETIME_FUNCTION_OVERFLOW
        case cantUpdateUsedTableInSfOrTrg = 1442 // ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG
        case viewPreventUpdate = 1443 // ER_VIEW_PREVENT_UPDATE
        case psNoRecursion = 1444 // ER_PS_NO_RECURSION
        case spCantSetAutocommit = 1445 // ER_SP_CANT_SET_AUTOCOMMIT
        case malformedDefiner = 1446 // ER_MALFORMED_DEFINER
        case viewFrmNoUser = 1447 // ER_VIEW_FRM_NO_USER
        case viewOtherUser = 1448 // ER_VIEW_OTHER_USER
        case noSuchUser = 1449 // ER_NO_SUCH_USER
        case forbidSchemaChange = 1450 // ER_FORBID_SCHEMA_CHANGE
        case rowIsReferenced2  = 1451 // ER_ROW_IS_REFERENCED_2
        case noReferencedRow2  = 1452 // ER_NO_REFERENCED_ROW_2
        case spBadVarShadow = 1453 // ER_SP_BAD_VAR_SHADOW
        case trgNoDefiner = 1454 // ER_TRG_NO_DEFINER
        case oldFileFormat = 1455 // ER_OLD_FILE_FORMAT
        case spRecursionLimit = 1456 // ER_SP_RECURSION_LIMIT
        case spProcTableCorrupt = 1457 // ER_SP_PROC_TABLE_CORRUPT
        case spWrongName = 1458 // ER_SP_WRONG_NAME
        case tableNeedsUpgrade = 1459 // ER_TABLE_NEEDS_UPGRADE
        case spNoAggregate = 1460 // ER_SP_NO_AGGREGATE
        case maxPreparedStmtCountReached = 1461 // ER_MAX_PREPARED_STMT_COUNT_REACHED
        case viewRecursive = 1462 // ER_VIEW_RECURSIVE
        case nonGroupingFieldUsed = 1463 // ER_NON_GROUPING_FIELD_USED
        case tableCantHandleSpkeys = 1464 // ER_TABLE_CANT_HANDLE_SPKEYS
        case noTriggersOnSystemSchema = 1465 // ER_NO_TRIGGERS_ON_SYSTEM_SCHEMA
        case removedSpaces = 1466 // ER_REMOVED_SPACES
        case autoincReadFailed = 1467 // ER_AUTOINC_READ_FAILED
        case username = 1468 // ER_USERNAME
        case hostname = 1469 // ER_HOSTNAME
        case wrongStringLength = 1470 // ER_WRONG_STRING_LENGTH
        case nonInsertableTable = 1471 // ER_NON_INSERTABLE_TABLE
        case adminWrongMrgTable = 1472 // ER_ADMIN_WRONG_MRG_TABLE
        case tooHighLevelOfNestingForSelect = 1473 // ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT
        case nameBecomesEmpty = 1474 // ER_NAME_BECOMES_EMPTY
        case ambiguousFieldTerm = 1475 // ER_AMBIGUOUS_FIELD_TERM
        case foreignServerExists = 1476 // ER_FOREIGN_SERVER_EXISTS
        case foreignServerDoesntExist = 1477 // ER_FOREIGN_SERVER_DOESNT_EXIST
        case illegalHaCreateOption = 1478 // ER_ILLEGAL_HA_CREATE_OPTION
        case partitionRequiresValuesError = 1479 // ER_PARTITION_REQUIRES_VALUES_ERROR
        case partitionWrongValuesError = 1480 // ER_PARTITION_WRONG_VALUES_ERROR
        case partitionMaxvalueError = 1481 // ER_PARTITION_MAXVALUE_ERROR
        case partitionSubpartitionError = 1482 // ER_PARTITION_SUBPARTITION_ERROR
        case partitionSubpartMixError = 1483 // ER_PARTITION_SUBPART_MIX_ERROR
        case partitionWrongNoPartError = 1484 // ER_PARTITION_WRONG_NO_PART_ERROR
        case partitionWrongNoSubpartError = 1485 // ER_PARTITION_WRONG_NO_SUBPART_ERROR
        case wrongExprInPartitionFuncError = 1486 // ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR
        case noConstExprInRangeOrListError = 1487 // ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR
        case fieldNotFoundPartError = 1488 // ER_FIELD_NOT_FOUND_PART_ERROR
        case listOfFieldsOnlyInHashError = 1489 // ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR
        case inconsistentPartitionInfoError = 1490 // ER_INCONSISTENT_PARTITION_INFO_ERROR
        case partitionFuncNotAllowedError = 1491 // ER_PARTITION_FUNC_NOT_ALLOWED_ERROR
        case partitionsMustBeDefinedError = 1492 // ER_PARTITIONS_MUST_BE_DEFINED_ERROR
        case rangeNotIncreasingError = 1493 // ER_RANGE_NOT_INCREASING_ERROR
        case inconsistentTypeOfFunctionsError = 1494 // ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR
        case multipleDefConstInListPartError = 1495 // ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR
        case partitionEntryError = 1496 // ER_PARTITION_ENTRY_ERROR
        case mixHandlerError = 1497 // ER_MIX_HANDLER_ERROR
        case partitionNotDefinedError = 1498 // ER_PARTITION_NOT_DEFINED_ERROR
        case tooManyPartitionsError = 1499 // ER_TOO_MANY_PARTITIONS_ERROR
        case subpartitionError = 1500 // ER_SUBPARTITION_ERROR
        case cantCreateHandlerFile = 1501 // ER_CANT_CREATE_HANDLER_FILE
        case blobFieldInPartFuncError = 1502 // ER_BLOB_FIELD_IN_PART_FUNC_ERROR
        case uniqueKeyNeedAllFieldsInPf = 1503 // ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF
        case noPartsError = 1504 // ER_NO_PARTS_ERROR
        case partitionMgmtOnNonpartitioned = 1505 // ER_PARTITION_MGMT_ON_NONPARTITIONED
        case foreignKeyOnPartitioned = 1506 // ER_FOREIGN_KEY_ON_PARTITIONED
        case dropPartitionNonExistent = 1507 // ER_DROP_PARTITION_NON_EXISTENT
        case dropLastPartition = 1508 // ER_DROP_LAST_PARTITION
        case coalesceOnlyOnHashPartition = 1509 // ER_COALESCE_ONLY_ON_HASH_PARTITION
        case reorgHashOnlyOnSameNo = 1510 // ER_REORG_HASH_ONLY_ON_SAME_NO
        case reorgNoParamError = 1511 // ER_REORG_NO_PARAM_ERROR
        case onlyOnRangeListPartition = 1512 // ER_ONLY_ON_RANGE_LIST_PARTITION
        case addPartitionSubpartError = 1513 // ER_ADD_PARTITION_SUBPART_ERROR
        case addPartitionNoNewPartition = 1514 // ER_ADD_PARTITION_NO_NEW_PARTITION
        case coalescePartitionNoPartition = 1515 // ER_COALESCE_PARTITION_NO_PARTITION
        case reorgPartitionNotExist = 1516 // ER_REORG_PARTITION_NOT_EXIST
        case sameNamePartition = 1517 // ER_SAME_NAME_PARTITION
        case noBinlogError = 1518 // ER_NO_BINLOG_ERROR
        case consecutiveReorgPartitions = 1519 // ER_CONSECUTIVE_REORG_PARTITIONS
        case reorgOutsideRange = 1520 // ER_REORG_OUTSIDE_RANGE
        case partitionFunctionFailure = 1521 // ER_PARTITION_FUNCTION_FAILURE
        case partStateError = 1522 // ER_PART_STATE_ERROR
        case limitedPartRange = 1523 // ER_LIMITED_PART_RANGE
        case pluginIsNotLoaded = 1524 // ER_PLUGIN_IS_NOT_LOADED
        case wrongValue = 1525 // ER_WRONG_VALUE
        case noPartitionForGivenValue = 1526 // ER_NO_PARTITION_FOR_GIVEN_VALUE
        case filegroupOptionOnlyOnce = 1527 // ER_FILEGROUP_OPTION_ONLY_ONCE
        case createFilegroupFailed = 1528 // ER_CREATE_FILEGROUP_FAILED
        case dropFilegroupFailed = 1529 // ER_DROP_FILEGROUP_FAILED
        case tablespaceAutoExtendError = 1530 // ER_TABLESPACE_AUTO_EXTEND_ERROR
        case wrongSizeNumber = 1531 // ER_WRONG_SIZE_NUMBER
        case sizeOverflowError = 1532 // ER_SIZE_OVERFLOW_ERROR
        case alterFilegroupFailed = 1533 // ER_ALTER_FILEGROUP_FAILED
        case binlogRowLoggingFailed = 1534 // ER_BINLOG_ROW_LOGGING_FAILED
        case binlogRowWrongTableDef = 1535 // ER_BINLOG_ROW_WRONG_TABLE_DEF
        case binlogRowRbrToSbr = 1536 // ER_BINLOG_ROW_RBR_TO_SBR
        case eventAlreadyExists = 1537 // ER_EVENT_ALREADY_EXISTS
        case eventStoreFailed = 1538 // ER_EVENT_STORE_FAILED
        case eventDoesNotExist = 1539 // ER_EVENT_DOES_NOT_EXIST
        case eventCantAlter = 1540 // ER_EVENT_CANT_ALTER
        case eventDropFailed = 1541 // ER_EVENT_DROP_FAILED
        case eventIntervalNotPositiveOrTooBig = 1542 // ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG
        case eventEndsBeforeStarts = 1543 // ER_EVENT_ENDS_BEFORE_STARTS
        case eventExecTimeInThePast = 1544 // ER_EVENT_EXEC_TIME_IN_THE_PAST
        case eventOpenTableFailed = 1545 // ER_EVENT_OPEN_TABLE_FAILED
        case eventNeitherMExprNorMAt = 1546 // ER_EVENT_NEITHER_M_EXPR_NOR_M_AT
        case obsoleteColCountDoesntMatchCorrupted = 1547 // ER_OBSOLETE_COL_COUNT_DOESNT_MATCH_CORRUPTED
        case obsoleteCannotLoadFromTable = 1548 // ER_OBSOLETE_CANNOT_LOAD_FROM_TABLE
        case eventCannotDelete = 1549 // ER_EVENT_CANNOT_DELETE
        case eventCompileError = 1550 // ER_EVENT_COMPILE_ERROR
        case eventSameName = 1551 // ER_EVENT_SAME_NAME
        case eventDataTooLong = 1552 // ER_EVENT_DATA_TOO_LONG
        case dropIndexFk = 1553 // ER_DROP_INDEX_FK
        case warnDeprecatedSyntaxWithVer = 1554 // ER_WARN_DEPRECATED_SYNTAX_WITH_VER
        case cantWriteLockLogTable = 1555 // ER_CANT_WRITE_LOCK_LOG_TABLE
        case cantLockLogTable = 1556 // ER_CANT_LOCK_LOG_TABLE
        case foreignDuplicateKeyOldUnused = 1557 // ER_FOREIGN_DUPLICATE_KEY_OLD_UNUSED
        case colCountDoesntMatchPleaseUpdate = 1558 // ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE
        case tempTablePreventsSwitchOutOfRbr = 1559 // ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR
        case storedFunctionPreventsSwitchBinlogFormat = 1560 // ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT
        case ndbCantSwitchBinlogFormat = 1561 // ER_NDB_CANT_SWITCH_BINLOG_FORMAT
        case partitionNoTemporary = 1562 // ER_PARTITION_NO_TEMPORARY
        case partitionConstDomainError = 1563 // ER_PARTITION_CONST_DOMAIN_ERROR
        case partitionFunctionIsNotAllowed = 1564 // ER_PARTITION_FUNCTION_IS_NOT_ALLOWED
        case ddlLogError = 1565 // ER_DDL_LOG_ERROR
        case nullInValuesLessThan = 1566 // ER_NULL_IN_VALUES_LESS_THAN
        case wrongPartitionName = 1567 // ER_WRONG_PARTITION_NAME
        case cantChangeTxCharacteristics = 1568 // ER_CANT_CHANGE_TX_CHARACTERISTICS
        case duplicateEntryAutoincrementCase = 1569 // DUP_ENTRY_AUTOINCREMENT_CASE
        case eventModifyQueueError = 1570 // ER_EVENT_MODIFY_QUEUE_ERROR
        case eventSetVarError = 1571 // ER_EVENT_SET_VAR_ERROR
        case partitionMergeError = 1572 // ER_PARTITION_MERGE_ERROR
        case cantActivateLog = 1573 // ER_CANT_ACTIVATE_LOG
        case rbrNotAvailable = 1574 // ER_RBR_NOT_AVAILABLE
        case base64DecodeError = 1575 // ER_BASE64_DECODE_ERROR
        case eventRecursionForbidden = 1576 // ER_EVENT_RECURSION_FORBIDDEN
        case eventsDbError = 1577 // ER_EVENTS_DB_ERROR
        case onlyIntegersAllowed = 1578 // ER_ONLY_INTEGERS_ALLOWED
        case unsuportedLogEngine = 1579 // ER_UNSUPORTED_LOG_ENGINE
        case badLogStatement = 1580 // ER_BAD_LOG_STATEMENT
        case cantRenameLogTable = 1581 // ER_CANT_RENAME_LOG_TABLE
        case wrongParamcountToNativeFct = 1582 // ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
        case wrongParametersToNativeFct = 1583 // ER_WRONG_PARAMETERS_TO_NATIVE_FCT
        case wrongParametersToStoredFct = 1584 // ER_WRONG_PARAMETERS_TO_STORED_FCT
        case nativeFctNameCollision = 1585 // ER_NATIVE_FCT_NAME_COLLISION
        case dupEntryWithKeyName = 1586 // ER_DUP_ENTRY_WITH_KEY_NAME
        case binlogPurgeEmfile = 1587 // ER_BINLOG_PURGE_EMFILE
        case eventCannotCreateInThePast = 1588 // ER_EVENT_CANNOT_CREATE_IN_THE_PAST
        case eventCannotAlterInThePast = 1589 // ER_EVENT_CANNOT_ALTER_IN_THE_PAST
        case slaveIncident = 1590 // ER_SLAVE_INCIDENT
        case noPartitionForGivenValueSilent = 1591 // ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT
        case binlogUnsafeStatement = 1592 // ER_BINLOG_UNSAFE_STATEMENT
        case slaveFatalError = 1593 // ER_SLAVE_FATAL_ERROR
        case slaveRelayLogReadFailure = 1594 // ER_SLAVE_RELAY_LOG_READ_FAILURE
        case slaveRelayLogWriteFailure = 1595 // ER_SLAVE_RELAY_LOG_WRITE_FAILURE
        case slaveCreateEventFailure = 1596 // ER_SLAVE_CREATE_EVENT_FAILURE
        case slaveMasterComFailure = 1597 // ER_SLAVE_MASTER_COM_FAILURE
        case binlogLoggingImpossible = 1598 // ER_BINLOG_LOGGING_IMPOSSIBLE
        case viewNoCreationCtx = 1599 // ER_VIEW_NO_CREATION_CTX
        case viewInvalidCreationCtx = 1600 // ER_VIEW_INVALID_CREATION_CTX
        case srInvalidCreationCtx = 1601 // ER_SR_INVALID_CREATION_CTX
        case trgCorruptedFile = 1602 // ER_TRG_CORRUPTED_FILE
        case trgNoCreationCtx = 1603 // ER_TRG_NO_CREATION_CTX
        case trgInvalidCreationCtx = 1604 // ER_TRG_INVALID_CREATION_CTX
        case eventInvalidCreationCtx = 1605 // ER_EVENT_INVALID_CREATION_CTX
        case trgCantOpenTable = 1606 // ER_TRG_CANT_OPEN_TABLE
        case cantCreateSroutine = 1607 // ER_CANT_CREATE_SROUTINE
        case neverUsed = 1608 // ER_NEVER_USED
        case noFormatDescriptionEventBeforeBinlogStatement = 1609 // ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT
        case slaveCorruptEvent = 1610 // ER_SLAVE_CORRUPT_EVENT
        case loadDataInvalidColumnUnused = 1611 // ER_LOAD_DATA_INVALID_COLUMN_UNUSED
        case logPurgeNoFile = 1612 // ER_LOG_PURGE_NO_FILE
        case xaRbtimeout = 1613 // ER_XA_RBTIMEOUT
        case xaRbdeadlock = 1614 // ER_XA_RBDEADLOCK
        case needReprepare = 1615 // ER_NEED_REPREPARE
        case delayedNotSupported = 1616 // ER_DELAYED_NOT_SUPPORTED
        case rnNoMasterInfo = 1617 // WARN_NO_MASTER_INFO
        case rnOptionIgnored = 1618 // WARN_OPTION_IGNORED
        case pluginDeleteBuiltin = 1619 // ER_PLUGIN_DELETE_BUILTIN
        case rnPluginBusy = 1620 // WARN_PLUGIN_BUSY
        case variableIsReadonly = 1621 // ER_VARIABLE_IS_READONLY
        case warnEngineTransactionRollback = 1622 // ER_WARN_ENGINE_TRANSACTION_ROLLBACK
        case slaveHeartbeatFailure = 1623 // ER_SLAVE_HEARTBEAT_FAILURE
        case slaveHeartbeatValueOutOfRange = 1624 // ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE
        case ndbReplicationSchemaError = 1625 // ER_NDB_REPLICATION_SCHEMA_ERROR
        case conflictFnParseError = 1626 // ER_CONFLICT_FN_PARSE_ERROR
        case exceptionsWriteError = 1627 // ER_EXCEPTIONS_WRITE_ERROR
        case tooLongTableComment = 1628 // ER_TOO_LONG_TABLE_COMMENT
        case tooLongFieldComment = 1629 // ER_TOO_LONG_FIELD_COMMENT
        case funcInexistentNameCollision = 1630 // ER_FUNC_INEXISTENT_NAME_COLLISION
        case databaseName = 1631 // ER_DATABASE_NAME
        case tableName = 1632 // ER_TABLE_NAME
        case partitionName = 1633 // ER_PARTITION_NAME
        case subpartitionName = 1634 // ER_SUBPARTITION_NAME
        case temporaryName = 1635 // ER_TEMPORARY_NAME
        case renamedName = 1636 // ER_RENAMED_NAME
        case tooManyConcurrentTrxs = 1637 // ER_TOO_MANY_CONCURRENT_TRXS
        case rnNonAsciiSeparatorNotImplemented = 1638 // WARN_NON_ASCII_SEPARATOR_NOT_IMPLEMENTED
        case debugSyncTimeout = 1639 // ER_DEBUG_SYNC_TIMEOUT
        case debugSyncHitLimit = 1640 // ER_DEBUG_SYNC_HIT_LIMIT
        case dupSignalSet = 1641 // ER_DUP_SIGNAL_SET
        case signalWarn = 1642 // ER_SIGNAL_WARN
        case signalNotFound = 1643 // ER_SIGNAL_NOT_FOUND
        case signalException = 1644 // ER_SIGNAL_EXCEPTION
        case resignalWithoutActiveHandler = 1645 // ER_RESIGNAL_WITHOUT_ACTIVE_HANDLER
        case signalBadConditionType = 1646 // ER_SIGNAL_BAD_CONDITION_TYPE
        case rnCondItemTruncated = 1647 // WARN_COND_ITEM_TRUNCATED
        case condItemTooLong = 1648 // ER_COND_ITEM_TOO_LONG
        case unknownLocale = 1649 // ER_UNKNOWN_LOCALE
        case slaveIgnoreServerIds = 1650 // ER_SLAVE_IGNORE_SERVER_IDS
        case queryCacheDisabled = 1651 // ER_QUERY_CACHE_DISABLED
        case sameNamePartitionField = 1652 // ER_SAME_NAME_PARTITION_FIELD
        case partitionColumnListError = 1653 // ER_PARTITION_COLUMN_LIST_ERROR
        case wrongTypeColumnValueError = 1654 // ER_WRONG_TYPE_COLUMN_VALUE_ERROR
        case tooManyPartitionFuncFieldsError = 1655 // ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR
        case maxvalueInValuesIn = 1656 // ER_MAXVALUE_IN_VALUES_IN
        case tooManyValuesError = 1657 // ER_TOO_MANY_VALUES_ERROR
        case rowSinglePartitionFieldError = 1658 // ER_ROW_SINGLE_PARTITION_FIELD_ERROR
        case fieldTypeNotAllowedAsPartitionField = 1659 // ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD
        case partitionFieldsTooLong = 1660 // ER_PARTITION_FIELDS_TOO_LONG
        case binlogRowEngineAndStmtEngine = 1661 // ER_BINLOG_ROW_ENGINE_AND_STMT_ENGINE
        case binlogRowModeAndStmtEngine = 1662 // ER_BINLOG_ROW_MODE_AND_STMT_ENGINE
        case binlogUnsafeAndStmtEngine = 1663 // ER_BINLOG_UNSAFE_AND_STMT_ENGINE
        case binlogRowInjectionAndStmtEngine = 1664 // ER_BINLOG_ROW_INJECTION_AND_STMT_ENGINE
        case binlogStmtModeAndRowEngine = 1665 // ER_BINLOG_STMT_MODE_AND_ROW_ENGINE
        case binlogRowInjectionAndStmtMode = 1666 // ER_BINLOG_ROW_INJECTION_AND_STMT_MODE
        case binlogMultipleEnginesAndSelfLoggingEngine = 1667 // ER_BINLOG_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE
        case binlogUnsafeLimit = 1668 // ER_BINLOG_UNSAFE_LIMIT
        case unused4  = 1669 // ER_UNUSED4
        case binlogUnsafeSystemTable = 1670 // ER_BINLOG_UNSAFE_SYSTEM_TABLE
        case binlogUnsafeAutoincColumns = 1671 // ER_BINLOG_UNSAFE_AUTOINC_COLUMNS
        case binlogUnsafeUdf = 1672 // ER_BINLOG_UNSAFE_UDF
        case binlogUnsafeSystemVariable = 1673 // ER_BINLOG_UNSAFE_SYSTEM_VARIABLE
        case binlogUnsafeSystemFunction = 1674 // ER_BINLOG_UNSAFE_SYSTEM_FUNCTION
        case binlogUnsafeNontransAfterTrans = 1675 // ER_BINLOG_UNSAFE_NONTRANS_AFTER_TRANS
        case messageAndStatement = 1676 // ER_MESSAGE_AND_STATEMENT
        case slaveConversionFailed = 1677 // ER_SLAVE_CONVERSION_FAILED
        case slaveCantCreateConversion = 1678 // ER_SLAVE_CANT_CREATE_CONVERSION
        case insideTransactionPreventsSwitchBinlogFormat = 1679 // ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT
        case pathLength = 1680 // ER_PATH_LENGTH
        case warnDeprecatedSyntaxNoReplacement = 1681 // ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT
        case wrongNativeTableStructure = 1682 // ER_WRONG_NATIVE_TABLE_STRUCTURE
        case wrongPerfschemaUsage = 1683 // ER_WRONG_PERFSCHEMA_USAGE
        case warnISSkippedTable = 1684 // ER_WARN_I_S_SKIPPED_TABLE
        case insideTransactionPreventsSwitchBinlogDirect = 1685 // ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT
        case storedFunctionPreventsSwitchBinlogDirect = 1686 // ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT
        case spatialMustHaveGeomCol = 1687 // ER_SPATIAL_MUST_HAVE_GEOM_COL
        case tooLongIndexComment = 1688 // ER_TOO_LONG_INDEX_COMMENT
        case lockAborted = 1689 // ER_LOCK_ABORTED
        case dataOutOfRange = 1690 // ER_DATA_OUT_OF_RANGE
        case wrongSpvarTypeInLimit = 1691 // ER_WRONG_SPVAR_TYPE_IN_LIMIT
        case binlogUnsafeMultipleEnginesAndSelfLoggingEngine = 1692 // ER_BINLOG_UNSAFE_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE
        case binlogUnsafeMixedStatement = 1693 // ER_BINLOG_UNSAFE_MIXED_STATEMENT
        case insideTransactionPreventsSwitchSqlLogBin = 1694 // ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN
        case storedFunctionPreventsSwitchSqlLogBin = 1695 // ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN
        case failedReadFromParFile = 1696 // ER_FAILED_READ_FROM_PAR_FILE
        case valuesIsNotIntTypeError = 1697 // ER_VALUES_IS_NOT_INT_TYPE_ERROR
        case accessDeniedNoPasswordError = 1698 // ER_ACCESS_DENIED_NO_PASSWORD_ERROR
        case setPasswordAuthPlugin = 1699 // ER_SET_PASSWORD_AUTH_PLUGIN
        case grantPluginUserExists = 1700 // ER_GRANT_PLUGIN_USER_EXISTS
        case truncateIllegalFk = 1701 // ER_TRUNCATE_ILLEGAL_FK
        case pluginIsPermanent = 1702 // ER_PLUGIN_IS_PERMANENT
        case slaveHeartbeatValueOutOfRangeMin = 1703 // ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN
        case slaveHeartbeatValueOutOfRangeMax = 1704 // ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX
        case stmtCacheFull = 1705 // ER_STMT_CACHE_FULL
        case multiUpdateKeyConflict = 1706 // ER_MULTI_UPDATE_KEY_CONFLICT
        case tableNeedsRebuild = 1707 // ER_TABLE_NEEDS_REBUILD
        case rnOptionBelowLimit = 1708 // WARN_OPTION_BELOW_LIMIT
        case indexColumnTooLong = 1709 // ER_INDEX_COLUMN_TOO_LONG
        case errorInTriggerBody = 1710 // ER_ERROR_IN_TRIGGER_BODY
        case errorInUnknownTriggerBody = 1711 // ER_ERROR_IN_UNKNOWN_TRIGGER_BODY
        case indexCorrupt = 1712 // ER_INDEX_CORRUPT
        case undoRecordTooBig = 1713 // ER_UNDO_RECORD_TOO_BIG
        case binlogUnsafeInsertIgnoreSelect = 1714 // ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT
        case binlogUnsafeInsertSelectUpdate = 1715 // ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE
        case binlogUnsafeReplaceSelect = 1716 // ER_BINLOG_UNSAFE_REPLACE_SELECT
        case binlogUnsafeCreateIgnoreSelect = 1717 // ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT
        case binlogUnsafeCreateReplaceSelect = 1718 // ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT
        case binlogUnsafeUpdateIgnore = 1719 // ER_BINLOG_UNSAFE_UPDATE_IGNORE
        case pluginNoUninstall = 1720 // ER_PLUGIN_NO_UNINSTALL
        case pluginNoInstall = 1721 // ER_PLUGIN_NO_INSTALL
        case binlogUnsafeWriteAutoincSelect = 1722 // ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT
        case binlogUnsafeCreateSelectAutoinc = 1723 // ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC
        case binlogUnsafeInsertTwoKeys = 1724 // ER_BINLOG_UNSAFE_INSERT_TWO_KEYS
        case tableInFkCheck = 1725 // ER_TABLE_IN_FK_CHECK
        case unsupportedEngine = 1726 // ER_UNSUPPORTED_ENGINE
        case binlogUnsafeAutoincNotFirst = 1727 // ER_BINLOG_UNSAFE_AUTOINC_NOT_FIRST
        case cannotLoadFromTableV2  = 1728 // ER_CANNOT_LOAD_FROM_TABLE_V2
        case masterDelayValueOutOfRange = 1729 // ER_MASTER_DELAY_VALUE_OUT_OF_RANGE
        case onlyFdAndRbrEventsAllowedInBinlogStatement = 1730 // ER_ONLY_FD_AND_RBR_EVENTS_ALLOWED_IN_BINLOG_STATEMENT
        case partitionExchangeDifferentOption = 1731 // ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
        case partitionExchangePartTable = 1732 // ER_PARTITION_EXCHANGE_PART_TABLE
        case partitionExchangeTempTable = 1733 // ER_PARTITION_EXCHANGE_TEMP_TABLE
        case partitionInsteadOfSubpartition = 1734 // ER_PARTITION_INSTEAD_OF_SUBPARTITION
        case unknownPartition = 1735 // ER_UNKNOWN_PARTITION
        case tablesDifferentMetadata = 1736 // ER_TABLES_DIFFERENT_METADATA
        case rowDoesNotMatchPartition = 1737 // ER_ROW_DOES_NOT_MATCH_PARTITION
        case binlogCacheSizeGreaterThanMax = 1738 // ER_BINLOG_CACHE_SIZE_GREATER_THAN_MAX
        case warnIndexNotApplicable = 1739 // ER_WARN_INDEX_NOT_APPLICABLE
        case partitionExchangeForeignKey = 1740 // ER_PARTITION_EXCHANGE_FOREIGN_KEY
        case noSuchKeyValue = 1741 // ER_NO_SUCH_KEY_VALUE
        case rplInfoDataTooLong = 1742 // ER_RPL_INFO_DATA_TOO_LONG
        case networkReadEventChecksumFailure = 1743 // ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE
        case binlogReadEventChecksumFailure = 1744 // ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE
        case binlogStmtCacheSizeGreaterThanMax = 1745 // ER_BINLOG_STMT_CACHE_SIZE_GREATER_THAN_MAX
        case cantUpdateTableInCreateTableSelect = 1746 // ER_CANT_UPDATE_TABLE_IN_CREATE_TABLE_SELECT
        case partitionClauseOnNonpartitioned = 1747 // ER_PARTITION_CLAUSE_ON_NONPARTITIONED
        case rowDoesNotMatchGivenPartitionSet = 1748 // ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET
        case noSuchPartitionUnused = 1749 // ER_NO_SUCH_PARTITION__UNUSED
        case changeRplInfoRepositoryFailure = 1750 // ER_CHANGE_RPL_INFO_REPOSITORY_FAILURE
        case warningNotCompleteRollbackWithCreatedTempTable = 1751 // ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_CREATED_TEMP_TABLE
        case warningNotCompleteRollbackWithDroppedTempTable = 1752 // ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_DROPPED_TEMP_TABLE
        case mtsFeatureIsNotSupported = 1753 // ER_MTS_FEATURE_IS_NOT_SUPPORTED
        case mtsUpdatedDbsGreaterMax = 1754 // ER_MTS_UPDATED_DBS_GREATER_MAX
        case mtsCantParallel = 1755 // ER_MTS_CANT_PARALLEL
        case mtsInconsistentData = 1756 // ER_MTS_INCONSISTENT_DATA
        case fulltextNotSupportedWithPartitioning = 1757 // ER_FULLTEXT_NOT_SUPPORTED_WITH_PARTITIONING
        case daInvalidConditionNumber = 1758 // ER_DA_INVALID_CONDITION_NUMBER
        case insecurePlainText = 1759 // ER_INSECURE_PLAIN_TEXT
        case insecureChangeMaster = 1760 // ER_INSECURE_CHANGE_MASTER
        case foreignDuplicateKeyWithChildInfo = 1761 // ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO
        case foreignDuplicateKeyWithoutChildInfo = 1762 // ER_FOREIGN_DUPLICATE_KEY_WITHOUT_CHILD_INFO
        case sqlthreadWithSecureSlave = 1763 // ER_SQLTHREAD_WITH_SECURE_SLAVE
        case tableHasNoFt = 1764 // ER_TABLE_HAS_NO_FT
        case variableNotSettableInSfOrTrigger = 1765 // ER_VARIABLE_NOT_SETTABLE_IN_SF_OR_TRIGGER
        case variableNotSettableInTransaction = 1766 // ER_VARIABLE_NOT_SETTABLE_IN_TRANSACTION
        case gtidNextIsNotInGtidNextList = 1767 // ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST
        case cantChangeGtidNextInTransaction = 1768 // ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION
        case setStatementCannotInvokeFunction = 1769 // ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION
        case gtidNextCantBeAutomaticIfGtidNextListIsNonNull = 1770 // ER_GTID_NEXT_CANT_BE_AUTOMATIC_IF_GTID_NEXT_LIST_IS_NON_NULL
        case skippingLoggedTransaction = 1771 // ER_SKIPPING_LOGGED_TRANSACTION
        case malformedGtidSetSpecification = 1772 // ER_MALFORMED_GTID_SET_SPECIFICATION
        case malformedGtidSetEncoding = 1773 // ER_MALFORMED_GTID_SET_ENCODING
        case malformedGtidSpecification = 1774 // ER_MALFORMED_GTID_SPECIFICATION
        case gnoExhausted = 1775 // ER_GNO_EXHAUSTED
        case badSlaveAutoPosition = 1776 // ER_BAD_SLAVE_AUTO_POSITION
        case autoPositionRequiresGtidModeNotOff = 1777 // ER_AUTO_POSITION_REQUIRES_GTID_MODE_NOT_OFF
        case cantDoImplicitCommitInTrxWhenGtidNextIsSet = 1778 // ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET
        case gtidModeOnRequiresEnforceGtidConsistencyOn = 1779 // ER_GTID_MODE_ON_REQUIRES_ENFORCE_GTID_CONSISTENCY_ON
        case gtidModeRequiresBinlog = 1780 // ER_GTID_MODE_REQUIRES_BINLOG
        case cantSetGtidNextToGtidWhenGtidModeIsOff = 1781 // ER_CANT_SET_GTID_NEXT_TO_GTID_WHEN_GTID_MODE_IS_OFF
        case cantSetGtidNextToAnonymousWhenGtidModeIsOn = 1782 // ER_CANT_SET_GTID_NEXT_TO_ANONYMOUS_WHEN_GTID_MODE_IS_ON
        case cantSetGtidNextListToNonNullWhenGtidModeIsOff = 1783 // ER_CANT_SET_GTID_NEXT_LIST_TO_NON_NULL_WHEN_GTID_MODE_IS_OFF
        case foundGtidEventWhenGtidModeIsOffUnused = 1784 // ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF__UNUSED
        case gtidUnsafeNonTransactionalTable = 1785 // ER_GTID_UNSAFE_NON_TRANSACTIONAL_TABLE
        case gtidUnsafeCreateSelect = 1786 // ER_GTID_UNSAFE_CREATE_SELECT
        case gtidUnsafeCreateDropTemporaryTableInTransaction = 1787 // ER_GTID_UNSAFE_CREATE_DROP_TEMPORARY_TABLE_IN_TRANSACTION
        case gtidModeCanOnlyChangeOneStepAtATime = 1788 // ER_GTID_MODE_CAN_ONLY_CHANGE_ONE_STEP_AT_A_TIME
        case masterHasPurgedRequiredGtids = 1789 // ER_MASTER_HAS_PURGED_REQUIRED_GTIDS
        case cantSetGtidNextWhenOwningGtid = 1790 // ER_CANT_SET_GTID_NEXT_WHEN_OWNING_GTID
        case unknownExplainFormat = 1791 // ER_UNKNOWN_EXPLAIN_FORMAT
        case cantExecuteInReadOnlyTransaction = 1792 // ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION
        case tooLongTablePartitionComment = 1793 // ER_TOO_LONG_TABLE_PARTITION_COMMENT
        case slaveConfiguration = 1794 // ER_SLAVE_CONFIGURATION
        case innodbFtLimit = 1795 // ER_INNODB_FT_LIMIT
        case innodbNoFtTempTable = 1796 // ER_INNODB_NO_FT_TEMP_TABLE
        case innodbFtWrongDocidColumn = 1797 // ER_INNODB_FT_WRONG_DOCID_COLUMN
        case innodbFtWrongDocidIndex = 1798 // ER_INNODB_FT_WRONG_DOCID_INDEX
        case innodbOnlineLogTooBig = 1799 // ER_INNODB_ONLINE_LOG_TOO_BIG
        case unknownAlterAlgorithm = 1800 // ER_UNKNOWN_ALTER_ALGORITHM
        case unknownAlterLock = 1801 // ER_UNKNOWN_ALTER_LOCK
        case mtsChangeMasterCantRunWithGaps = 1802 // ER_MTS_CHANGE_MASTER_CANT_RUN_WITH_GAPS
        case mtsRecoveryFailure = 1803 // ER_MTS_RECOVERY_FAILURE
        case mtsResetWorkers = 1804 // ER_MTS_RESET_WORKERS
        case colCountDoesntMatchCorruptedV2  = 1805 // ER_COL_COUNT_DOESNT_MATCH_CORRUPTED_V2
        case slaveSilentRetryTransaction = 1806 // ER_SLAVE_SILENT_RETRY_TRANSACTION
        case discardFkChecksRunning = 1807 // ER_DISCARD_FK_CHECKS_RUNNING
        case tableSchemaMismatch = 1808 // ER_TABLE_SCHEMA_MISMATCH
        case tableInSystemTablespace = 1809 // ER_TABLE_IN_SYSTEM_TABLESPACE
        case ioReadError = 1810 // ER_IO_READ_ERROR
        case ioWriteError = 1811 // ER_IO_WRITE_ERROR
        case tablespaceMissing = 1812 // ER_TABLESPACE_MISSING
        case tablespaceExists = 1813 // ER_TABLESPACE_EXISTS
        case tablespaceDiscarded = 1814 // ER_TABLESPACE_DISCARDED
        case internalError = 1815 // ER_INTERNAL_ERROR
        case innodbImportError = 1816 // ER_INNODB_IMPORT_ERROR
        case innodbIndexCorrupt = 1817 // ER_INNODB_INDEX_CORRUPT
        case invalidYearColumnLength = 1818 // ER_INVALID_YEAR_COLUMN_LENGTH
        case notValidPassword = 1819 // ER_NOT_VALID_PASSWORD
        case mustChangePassword = 1820 // ER_MUST_CHANGE_PASSWORD
        case fkNoIndexChild = 1821 // ER_FK_NO_INDEX_CHILD
        case fkNoIndexParent = 1822 // ER_FK_NO_INDEX_PARENT
        case fkFailAddSystem = 1823 // ER_FK_FAIL_ADD_SYSTEM
        case fkCannotOpenParent = 1824 // ER_FK_CANNOT_OPEN_PARENT
        case fkIncorrectOption = 1825 // ER_FK_INCORRECT_OPTION
        case fkDupName = 1826 // ER_FK_DUP_NAME
        case passwordFormat = 1827 // ER_PASSWORD_FORMAT
        case fkColumnCannotDrop = 1828 // ER_FK_COLUMN_CANNOT_DROP
        case fkColumnCannotDropChild = 1829 // ER_FK_COLUMN_CANNOT_DROP_CHILD
        case fkColumnNotNull = 1830 // ER_FK_COLUMN_NOT_NULL
        case dupIndex = 1831 // ER_DUP_INDEX
        case fkColumnCannotChange = 1832 // ER_FK_COLUMN_CANNOT_CHANGE
        case fkColumnCannotChangeChild = 1833 // ER_FK_COLUMN_CANNOT_CHANGE_CHILD
        case unused5  = 1834 // ER_UNUSED5
        case malformedPacket = 1835 // ER_MALFORMED_PACKET
        case readOnlyMode = 1836 // ER_READ_ONLY_MODE
        case gtidNextTypeUndefinedGroup = 1837 // ER_GTID_NEXT_TYPE_UNDEFINED_GROUP
        case variableNotSettableInSp = 1838 // ER_VARIABLE_NOT_SETTABLE_IN_SP
        case cantSetGtidPurgedWhenGtidModeIsOff = 1839 // ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF
        case cantSetGtidPurgedWhenGtidExecutedIsNotEmpty = 1840 // ER_CANT_SET_GTID_PURGED_WHEN_GTID_EXECUTED_IS_NOT_EMPTY
        case cantSetGtidPurgedWhenOwnedGtidsIsNotEmpty = 1841 // ER_CANT_SET_GTID_PURGED_WHEN_OWNED_GTIDS_IS_NOT_EMPTY
        case gtidPurgedWasChanged = 1842 // ER_GTID_PURGED_WAS_CHANGED
        case gtidExecutedWasChanged = 1843 // ER_GTID_EXECUTED_WAS_CHANGED
        case binlogStmtModeAndNoReplTables = 1844 // ER_BINLOG_STMT_MODE_AND_NO_REPL_TABLES
        case alterOperationNotSupported = 1845 // ER_ALTER_OPERATION_NOT_SUPPORTED
        case alterOperationNotSupportedReason = 1846 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON
        case alterOperationNotSupportedReasonCopy = 1847 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COPY
        case alterOperationNotSupportedReasonPartition = 1848 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_PARTITION
        case alterOperationNotSupportedReasonFkRename = 1849 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_RENAME
        case alterOperationNotSupportedReasonColumnType = 1850 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COLUMN_TYPE
        case alterOperationNotSupportedReasonFkCheck = 1851 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_CHECK
        case unused6  = 1852 // ER_UNUSED6
        case alterOperationNotSupportedReasonNopk = 1853 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOPK
        case alterOperationNotSupportedReasonAutoinc = 1854 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_AUTOINC
        case alterOperationNotSupportedReasonHiddenFts = 1855 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_HIDDEN_FTS
        case alterOperationNotSupportedReasonChangeFts = 1856 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_CHANGE_FTS
        case alterOperationNotSupportedReasonFts = 1857 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FTS
        case sqlSlaveSkipCounterNotSettableInGtidMode = 1858 // ER_SQL_SLAVE_SKIP_COUNTER_NOT_SETTABLE_IN_GTID_MODE
        case dupUnknownInIndex = 1859 // ER_DUP_UNKNOWN_IN_INDEX
        case identCausesTooLongPath = 1860 // ER_IDENT_CAUSES_TOO_LONG_PATH
        case alterOperationNotSupportedReasonNotNull = 1861 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOT_NULL
        case mustChangePasswordLogin = 1862 // ER_MUST_CHANGE_PASSWORD_LOGIN
        case rowInWrongPartition = 1863 // ER_ROW_IN_WRONG_PARTITION
        case mtsEventBiggerPendingJobsSizeMax = 1864 // ER_MTS_EVENT_BIGGER_PENDING_JOBS_SIZE_MAX
        case innodbNoFtUsesParser = 1865 // ER_INNODB_NO_FT_USES_PARSER
        case binlogLogicalCorruption = 1866 // ER_BINLOG_LOGICAL_CORRUPTION
        case warnPurgeLogInUse = 1867 // ER_WARN_PURGE_LOG_IN_USE
        case warnPurgeLogIsActive = 1868 // ER_WARN_PURGE_LOG_IS_ACTIVE
        case autoIncrementConflict = 1869 // ER_AUTO_INCREMENT_CONFLICT
        case rnOnBlockholeInRbr = 1870 // WARN_ON_BLOCKHOLE_IN_RBR
        case slaveMiInitRepository = 1871 // ER_SLAVE_MI_INIT_REPOSITORY
        case slaveRliInitRepository = 1872 // ER_SLAVE_RLI_INIT_REPOSITORY
        case accessDeniedChangeUserError = 1873 // ER_ACCESS_DENIED_CHANGE_USER_ERROR
        case innodbReadOnly = 1874 // ER_INNODB_READ_ONLY
        case stopSlaveSqlThreadTimeout = 1875 // ER_STOP_SLAVE_SQL_THREAD_TIMEOUT
        case stopSlaveIoThreadTimeout = 1876 // ER_STOP_SLAVE_IO_THREAD_TIMEOUT
        case tableCorrupt = 1877 // ER_TABLE_CORRUPT
        case tempFileWriteFailure = 1878 // ER_TEMP_FILE_WRITE_FAILURE
        case innodbFtAuxNotHexId = 1879 // ER_INNODB_FT_AUX_NOT_HEX_ID
        case oldTemporalsUpgraded = 1880 // ER_OLD_TEMPORALS_UPGRADED
        case innodbForcedRecovery = 1881 // ER_INNODB_FORCED_RECOVERY
        case aesInvalidIv = 1882 // ER_AES_INVALID_IV
        case pluginCannotBeUninstalled = 1883 // ER_PLUGIN_CANNOT_BE_UNINSTALLED
        case gtidUnsafeBinlogSplittableStatementAndGtidGroup = 1884 // ER_GTID_UNSAFE_BINLOG_SPLITTABLE_STATEMENT_AND_GTID_GROUP
        case slaveHasMoreGtidsThanMaster = 1885 // ER_SLAVE_HAS_MORE_GTIDS_THAN_MASTER
        case unknown = 2000 // CR_UNKNOWN_ERROR
        case socketCreate = 2001 // CR_SOCKET_CREATE_ERROR
        case connection = 2002 // CR_CONNECTION_ERROR
        case connectionHost = 2003 // CR_CONN_HOST_ERROR
        case ipSocket = 2004 // CR_IPSOCK_ERROR
        case unknownHost = 2005 // CR_UNKNOWN_HOST
        case serverGone = 2006 // CR_SERVER_GONE_ERROR
        case version = 2007 // CR_VERSION_ERROR
        case outOfMemory = 2008 // CR_OUT_OF_MEMORY
        case wrongHostInfo = 2009 // CR_WRONG_HOST_INFO
        case localhostConnection = 2010 // CR_LOCALHOST_CONNECTION
        case tcpConnection = 2011 // CR_TCP_CONNECTION
        case serverHandshake = 2012 // CR_SERVER_HANDSHAKE_ERR
        case serverLost = 2013 // CR_SERVER_LOST
        case commandsOutOfSync = 2014 // CR_COMMANDS_OUT_OF_SYNC
        case namedPipeConnection = 2015 // CR_NAMEDPIPE_CONNECTION
        case namedPipeWait = 2016 // CR_NAMEDPIPEWAIT_ERROR
        case namedPipeOpen = 2017 // CR_NAMEDPIPEOPEN_ERROR
        case namedPipeSetState = 2018 // CR_NAMEDPIPESETSTATE_ERROR
        case cantReadCharset = 2019 // CR_CANT_READ_CHARSET
        case clientNetPacketTooLarge = 2020 // CR_NET_PACKET_TOO_LARGE
        case embeddedConnection = 2021 // CR_EMBEDDED_CONNECTION
        case probeSlaveStatus = 2022 // CR_PROBE_SLAVE_STATUS
        case probeSlaveHosts = 2023 // CR_PROBE_SLAVE_HOSTS
        case probeSlaveConnect = 2024 // CR_PROBE_SLAVE_CONNECT
        case probeMasterConnect = 2025 // CR_PROBE_MASTER_CONNECT
        case sslConnection = 2026 // CR_SSL_CONNECTION_ERROR
        case clientMalformedPacket = 2027 // CR_MALFORMED_PACKET
        case wrongLicense = 2028 // CR_WRONG_LICENSE
        case nullPointer = 2029 // CR_NULL_POINTER
        case noPrepareStatement = 2030 // CR_NO_PREPARE_STMT
        case paramsNotBound = 2031 // CR_PARAMS_NOT_BOUND
        case dataTruncated = 2032 // CR_DATA_TRUNCATED
        case noParamtersExists = 2033 // CR_NO_PARAMETERS_EXISTS
        case invalidParameterNumber = 2034 // CR_INVALID_PARAMETER_NO
        case invalidBufferUse = 2035 // CR_INVALID_BUFFER_USE
        case unsupportedParamType = 2036 // CR_UNSUPPORTED_PARAM_TYPE
        case sharedMemoryConnection = 2037 // CR_SHARED_MEMORY_CONNECTION
        case sharedMemoryConnectionRequest = 2038 // CR_SHARED_MEMORY_CONNECT_REQUEST_ERROR
        case sharedMemoryConnectionAnswer = 2039 // CR_SHARED_MEMORY_CONNECT_ANSWER_ERROR
        case sharedMemoryConnectFileMap = 2040 // CR_SHARED_MEMORY_CONNECT_FILE_MAP_ERROR
        case sharedMemoryConnectMap = 2041 // CR_SHARED_MEMORY_CONNECT_MAP_ERROR
        case sharedMemoryFileMap = 2042 // CR_SHARED_MEMORY_FILE_MAP_ERROR
        case sharedMemoryMap = 2043 // CR_SHARED_MEMORY_MAP_ERROR
        case sharedMemoryEvent = 2044 // CR_SHARED_MEMORY_EVENT_ERROR
        case sharedMemoryConnectAbandoned = 2045 // CR_SHARED_MEMORY_CONNECT_ABANDONED_ERROR
        case sharedMemoryConnectSet = 2046 // CR_SHARED_MEMORY_CONNECT_SET_ERROR
        case connectionUnknownProtocol = 2047 // CR_CONN_UNKNOW_PROTOCOL
        case invalidConnectionHandle = 2048 // CR_INVALID_CONN_HANDLE
        case secureAuth = 2049 // CR_SECURE_AUTH
        case fetchCancelled = 2050 // CR_FETCH_CANCELED
        case noData = 2051 // CR_NO_DATA
        case noStatementMetadata = 2052 // CR_NO_STMT_METADATA
        case noResultSet = 2053 // CR_NO_RESULT_SET
        case notImplemented = 2054 // CR_NOT_IMPLEMENTED
        case serverLostExtended = 2055 // CR_SERVER_LOST_EXTENDED
        case statementClosed = 2056 // CR_STMT_CLOSED
        case newStatementMetadata = 2057 // CR_NEW_STMT_METADATA
        case alreadyConnected = 2058 // CR_ALREADY_CONNECTED
        case authPluginCannotLoad = 2059 // CR_AUTH_PLUGIN_CANNOT_LOAD
        case duplicateConnectionAttribute = 2060 // CR_DUPLICATE_CONNECTION_ATTR
        case authPlugin = 2061 // CR_AUTH_PLUGIN_ERR
        case insecureAPI = 2062 // CR_INSECURE_API_ERR
        case fileCorrupt = 3000 // ER_FILE_CORRUPT
        case errorOnMaster = 3001 // ER_ERROR_ON_MASTER
        case inconsistentError = 3002 // ER_INCONSISTENT_ERROR
        case storageEngineNotLoaded = 3003 // ER_STORAGE_ENGINE_NOT_LOADED
        case getStackedDaWithoutActiveHandler = 3004 // ER_GET_STACKED_DA_WITHOUT_ACTIVE_HANDLER
        case warnLegacySyntaxConverted = 3005 // ER_WARN_LEGACY_SYNTAX_CONVERTED
        case binlogUnsafeFulltextPlugin = 3006 // ER_BINLOG_UNSAFE_FULLTEXT_PLUGIN
        case cannotDiscardTemporaryTable = 3007 // ER_CANNOT_DISCARD_TEMPORARY_TABLE
        case fkDepthExceeded = 3008 // ER_FK_DEPTH_EXCEEDED
        case colCountDoesntMatchPleaseUpdateV2  = 3009 // ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE_V2
        case warnTriggerDoesntHaveCreated = 3010 // ER_WARN_TRIGGER_DOESNT_HAVE_CREATED
        case referencedTrgDoesNotExist = 3011 // ER_REFERENCED_TRG_DOES_NOT_EXIST
        case explainNotSupported = 3012 // ER_EXPLAIN_NOT_SUPPORTED
        case invalidFieldSize = 3013 // ER_INVALID_FIELD_SIZE
        case missingHaCreateOption = 3014 // ER_MISSING_HA_CREATE_OPTION
        case engineOutOfMemory = 3015 // ER_ENGINE_OUT_OF_MEMORY
        case passwordExpireAnonymousUser = 3016 // ER_PASSWORD_EXPIRE_ANONYMOUS_USER
        case slaveSqlThreadMustStop = 3017 // ER_SLAVE_SQL_THREAD_MUST_STOP
        case noFtMaterializedSubquery = 3018 // ER_NO_FT_MATERIALIZED_SUBQUERY
        case innodbUndoLogFull = 3019 // ER_INNODB_UNDO_LOG_FULL
        case invalidArgumentForLogarithm = 3020 // ER_INVALID_ARGUMENT_FOR_LOGARITHM
        case slaveChannelIoThreadMustStop = 3021 // ER_SLAVE_CHANNEL_IO_THREAD_MUST_STOP
        case warnOpenTempTablesMustBeZero = 3022 // ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO
        case warnOnlyMasterLogFileNoPos = 3023 // ER_WARN_ONLY_MASTER_LOG_FILE_NO_POS
        case queryTimeout = 3024 // ER_QUERY_TIMEOUT
        case nonRoSelectDisableTimer = 3025 // ER_NON_RO_SELECT_DISABLE_TIMER
        case dupListEntry = 3026 // ER_DUP_LIST_ENTRY
        case sqlModeNoEffect = 3027 // ER_SQL_MODE_NO_EFFECT
        case aggregateOrderForUnion = 3028 // ER_AGGREGATE_ORDER_FOR_UNION
        case aggregateOrderNonAggQuery = 3029 // ER_AGGREGATE_ORDER_NON_AGG_QUERY
        case slaveWorkerStoppedPreviousThdError = 3030 // ER_SLAVE_WORKER_STOPPED_PREVIOUS_THD_ERROR
        case dontSupportSlavePreserveCommitOrder = 3031 // ER_DONT_SUPPORT_SLAVE_PRESERVE_COMMIT_ORDER
        case serverOfflineMode = 3032 // ER_SERVER_OFFLINE_MODE
        case gisDifferentSrids = 3033 // ER_GIS_DIFFERENT_SRIDS
        case gisUnsupportedArgument = 3034 // ER_GIS_UNSUPPORTED_ARGUMENT
        case gisUnknownError = 3035 // ER_GIS_UNKNOWN_ERROR
        case gisUnknownException = 3036 // ER_GIS_UNKNOWN_EXCEPTION
        case gisInvalidData = 3037 // ER_GIS_INVALID_DATA
        case boostGeometryEmptyInputException = 3038 // ER_BOOST_GEOMETRY_EMPTY_INPUT_EXCEPTION
        case boostGeometryCentroidException = 3039 // ER_BOOST_GEOMETRY_CENTROID_EXCEPTION
        case boostGeometryOverlayInvalidInputException = 3040 // ER_BOOST_GEOMETRY_OVERLAY_INVALID_INPUT_EXCEPTION
        case boostGeometryTurnInfoException = 3041 // ER_BOOST_GEOMETRY_TURN_INFO_EXCEPTION
        case boostGeometrySelfIntersectionPointException = 3042 // ER_BOOST_GEOMETRY_SELF_INTERSECTION_POINT_EXCEPTION
        case boostGeometryUnknownException = 3043 // ER_BOOST_GEOMETRY_UNKNOWN_EXCEPTION
        case stdBadAllocError = 3044 // ER_STD_BAD_ALLOC_ERROR
        case stdDomainError = 3045 // ER_STD_DOMAIN_ERROR
        case stdLengthError = 3046 // ER_STD_LENGTH_ERROR
        case stdInvalidArgument = 3047 // ER_STD_INVALID_ARGUMENT
        case stdOutOfRangeError = 3048 // ER_STD_OUT_OF_RANGE_ERROR
        case stdOverflowError = 3049 // ER_STD_OVERFLOW_ERROR
        case stdRangeError = 3050 // ER_STD_RANGE_ERROR
        case stdUnderflowError = 3051 // ER_STD_UNDERFLOW_ERROR
        case stdLogicError = 3052 // ER_STD_LOGIC_ERROR
        case stdRuntimeError = 3053 // ER_STD_RUNTIME_ERROR
        case stdUnknownException = 3054 // ER_STD_UNKNOWN_EXCEPTION
        case gisDataWrongEndianess = 3055 // ER_GIS_DATA_WRONG_ENDIANESS
        case changeMasterPasswordLength = 3056 // ER_CHANGE_MASTER_PASSWORD_LENGTH
        case userLockWrongName = 3057 // ER_USER_LOCK_WRONG_NAME
        case userLockDeadlock = 3058 // ER_USER_LOCK_DEADLOCK
        case replaceInaccessibleRows = 3059 // ER_REPLACE_INACCESSIBLE_ROWS
        case alterOperationNotSupportedReasonGis = 3060 // ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_GIS
        case illegalUserVar = 3061 // ER_ILLEGAL_USER_VAR
        case gtidModeOff = 3062 // ER_GTID_MODE_OFF
        case unsupportedByReplicationThread = 3063 // ER_UNSUPPORTED_BY_REPLICATION_THREAD
        case incorrectType = 3064 // ER_INCORRECT_TYPE
        case fieldInOrderNotSelect = 3065 // ER_FIELD_IN_ORDER_NOT_SELECT
        case aggregateInOrderNotSelect = 3066 // ER_AGGREGATE_IN_ORDER_NOT_SELECT
        case invalidRplWildTableFilterPattern = 3067 // ER_INVALID_RPL_WILD_TABLE_FILTER_PATTERN
        case netOkPacketTooLarge = 3068 // ER_NET_OK_PACKET_TOO_LARGE
        case invalidJsonData = 3069 // ER_INVALID_JSON_DATA
        case invalidGeojsonMissingMember = 3070 // ER_INVALID_GEOJSON_MISSING_MEMBER
        case invalidGeojsonWrongType = 3071 // ER_INVALID_GEOJSON_WRONG_TYPE
        case invalidGeojsonUnspecified = 3072 // ER_INVALID_GEOJSON_UNSPECIFIED
        case dimensionUnsupported = 3073 // ER_DIMENSION_UNSUPPORTED
        case slaveChannelDoesNotExist = 3074 // ER_SLAVE_CHANNEL_DOES_NOT_EXIST
        case slaveMultipleChannelsHostPort = 3075 // ER_SLAVE_MULTIPLE_CHANNELS_HOST_PORT
        case slaveChannelNameInvalidOrTooLong = 3076 // ER_SLAVE_CHANNEL_NAME_INVALID_OR_TOO_LONG
        case slaveNewChannelWrongRepository = 3077 // ER_SLAVE_NEW_CHANNEL_WRONG_REPOSITORY
        case slaveChannelDelete = 3078 // ER_SLAVE_CHANNEL_DELETE
        case slaveMultipleChannelsCmd = 3079 // ER_SLAVE_MULTIPLE_CHANNELS_CMD
        case slaveMaxChannelsExceeded = 3080 // ER_SLAVE_MAX_CHANNELS_EXCEEDED
        case slaveChannelMustStop = 3081 // ER_SLAVE_CHANNEL_MUST_STOP
        case slaveChannelNotRunning = 3082 // ER_SLAVE_CHANNEL_NOT_RUNNING
        case slaveChannelWasRunning = 3083 // ER_SLAVE_CHANNEL_WAS_RUNNING
        case slaveChannelWasNotRunning = 3084 // ER_SLAVE_CHANNEL_WAS_NOT_RUNNING
        case slaveChannelSqlThreadMustStop = 3085 // ER_SLAVE_CHANNEL_SQL_THREAD_MUST_STOP
        case slaveChannelSqlSkipCounter = 3086 // ER_SLAVE_CHANNEL_SQL_SKIP_COUNTER
        case wrongFieldWithGroupV2  = 3087 // ER_WRONG_FIELD_WITH_GROUP_V2
        case mixOfGroupFuncAndFieldsV2  = 3088 // ER_MIX_OF_GROUP_FUNC_AND_FIELDS_V2
        case warnDeprecatedSysvarUpdate = 3089 // ER_WARN_DEPRECATED_SYSVAR_UPDATE
        case warnDeprecatedSqlmode = 3090 // ER_WARN_DEPRECATED_SQLMODE
        case cannotLogPartialDropDatabaseWithGtid = 3091 // ER_CANNOT_LOG_PARTIAL_DROP_DATABASE_WITH_GTID
        case groupReplicationConfiguration = 3092 // ER_GROUP_REPLICATION_CONFIGURATION
        case groupReplicationRunning = 3093 // ER_GROUP_REPLICATION_RUNNING
        case groupReplicationApplierInitError = 3094 // ER_GROUP_REPLICATION_APPLIER_INIT_ERROR
        case groupReplicationStopApplierThreadTimeout = 3095 // ER_GROUP_REPLICATION_STOP_APPLIER_THREAD_TIMEOUT
        case groupReplicationCommunicationLayerSessionError = 3096 // ER_GROUP_REPLICATION_COMMUNICATION_LAYER_SESSION_ERROR
        case groupReplicationCommunicationLayerJoinError = 3097 // ER_GROUP_REPLICATION_COMMUNICATION_LAYER_JOIN_ERROR
        case beforeDmlValidationError = 3098 // ER_BEFORE_DML_VALIDATION_ERROR
        case preventsVariableWithoutRbr = 3099 // ER_PREVENTS_VARIABLE_WITHOUT_RBR
        case runHookError = 3100 // ER_RUN_HOOK_ERROR
        case transactionRollbackDuringCommit = 3101 // ER_TRANSACTION_ROLLBACK_DURING_COMMIT
        case generatedColumnFunctionIsNotAllowed = 3102 // ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
        case unsupportedAlterInplaceOnVirtualColumn = 3103 // ER_UNSUPPORTED_ALTER_INPLACE_ON_VIRTUAL_COLUMN
        case wrongFkOptionForGeneratedColumn = 3104 // ER_WRONG_FK_OPTION_FOR_GENERATED_COLUMN
        case nonDefaultValueForGeneratedColumn = 3105 // ER_NON_DEFAULT_VALUE_FOR_GENERATED_COLUMN
        case unsupportedActionOnGeneratedColumn = 3106 // ER_UNSUPPORTED_ACTION_ON_GENERATED_COLUMN
        case generatedColumnNonPrior = 3107 // ER_GENERATED_COLUMN_NON_PRIOR
        case dependentByGeneratedColumn = 3108 // ER_DEPENDENT_BY_GENERATED_COLUMN
        case generatedColumnRefAutoInc = 3109 // ER_GENERATED_COLUMN_REF_AUTO_INC
        case featureNotAvailable = 3110 // ER_FEATURE_NOT_AVAILABLE
        case cantSetGtidMode = 3111 // ER_CANT_SET_GTID_MODE
        case cantUseAutoPositionWithGtidModeOff = 3112 // ER_CANT_USE_AUTO_POSITION_WITH_GTID_MODE_OFF
        case cantReplicateAnonymousWithAutoPosition = 3113 // ER_CANT_REPLICATE_ANONYMOUS_WITH_AUTO_POSITION
        case cantReplicateAnonymousWithGtidModeOn = 3114 // ER_CANT_REPLICATE_ANONYMOUS_WITH_GTID_MODE_ON
        case cantReplicateGtidWithGtidModeOff = 3115 // ER_CANT_REPLICATE_GTID_WITH_GTID_MODE_OFF
        case cantSetEnforceGtidConsistencyOnWithOngoingGtidViolatingTransactions = 3116 // ER_CANT_SET_ENFORCE_GTID_CONSISTENCY_ON_WITH_ONGOING_GTID_VIOLATING_TRANSACTIONS
        case setEnforceGtidConsistencyWarnWithOngoingGtidViolatingTransactions = 3117 // ER_SET_ENFORCE_GTID_CONSISTENCY_WARN_WITH_ONGOING_GTID_VIOLATING_TRANSACTIONS
        case accountHasBeenLocked = 3118 // ER_ACCOUNT_HAS_BEEN_LOCKED
        case wrongTablespaceName = 3119 // ER_WRONG_TABLESPACE_NAME
        case tablespaceIsNotEmpty = 3120 // ER_TABLESPACE_IS_NOT_EMPTY
        case wrongFileName = 3121 // ER_WRONG_FILE_NAME
        case boostGeometryInconsistentTurnsException = 3122 // ER_BOOST_GEOMETRY_INCONSISTENT_TURNS_EXCEPTION
        case warnOptimizerHintSyntaxError = 3123 // ER_WARN_OPTIMIZER_HINT_SYNTAX_ERROR
        case warnBadMaxExecutionTime = 3124 // ER_WARN_BAD_MAX_EXECUTION_TIME
        case warnUnsupportedMaxExecutionTime = 3125 // ER_WARN_UNSUPPORTED_MAX_EXECUTION_TIME
        case warnConflictingHint = 3126 // ER_WARN_CONFLICTING_HINT
        case warnUnknownQbName = 3127 // ER_WARN_UNKNOWN_QB_NAME
        case unresolvedHintName = 3128 // ER_UNRESOLVED_HINT_NAME
        case warnOnModifyingGtidExecutedTable = 3129 // ER_WARN_ON_MODIFYING_GTID_EXECUTED_TABLE
        case pluggableProtocolCommandNotSupported = 3130 // ER_PLUGGABLE_PROTOCOL_COMMAND_NOT_SUPPORTED
        case lockingServiceWrongName = 3131 // ER_LOCKING_SERVICE_WRONG_NAME
        case lockingServiceDeadlock = 3132 // ER_LOCKING_SERVICE_DEADLOCK
        case lockingServiceTimeout = 3133 // ER_LOCKING_SERVICE_TIMEOUT
        case gisMaxPointsInGeometryOverflowed = 3134 // ER_GIS_MAX_POINTS_IN_GEOMETRY_OVERFLOWED
        case sqlModeMerged = 3135 // ER_SQL_MODE_MERGED
        case vtokenPluginTokenMismatch = 3136 // ER_VTOKEN_PLUGIN_TOKEN_MISMATCH
        case vtokenPluginTokenNotFound = 3137 // ER_VTOKEN_PLUGIN_TOKEN_NOT_FOUND
        case cantSetVariableWhenOwningGtid = 3138 // ER_CANT_SET_VARIABLE_WHEN_OWNING_GTID
        case slaveChannelOperationNotAllowed = 3139 // ER_SLAVE_CHANNEL_OPERATION_NOT_ALLOWED
        case invalidJsonText = 3140 // ER_INVALID_JSON_TEXT
        case invalidJsonTextInParam = 3141 // ER_INVALID_JSON_TEXT_IN_PARAM
        case invalidJsonBinaryData = 3142 // ER_INVALID_JSON_BINARY_DATA
        case invalidJsonPath = 3143 // ER_INVALID_JSON_PATH
        case invalidJsonCharset = 3144 // ER_INVALID_JSON_CHARSET
        case invalidJsonCharsetInFunction = 3145 // ER_INVALID_JSON_CHARSET_IN_FUNCTION
        case invalidTypeForJson = 3146 // ER_INVALID_TYPE_FOR_JSON
        case invalidCastToJson = 3147 // ER_INVALID_CAST_TO_JSON
        case invalidJsonPathCharset = 3148 // ER_INVALID_JSON_PATH_CHARSET
        case invalidJsonPathWildcard = 3149 // ER_INVALID_JSON_PATH_WILDCARD
        case jsonValueTooBig = 3150 // ER_JSON_VALUE_TOO_BIG
        case jsonKeyTooBig = 3151 // ER_JSON_KEY_TOO_BIG
        case jsonUsedAsKey = 3152 // ER_JSON_USED_AS_KEY
        case jsonVacuousPath = 3153 // ER_JSON_VACUOUS_PATH
        case jsonBadOneOrAllArg = 3154 // ER_JSON_BAD_ONE_OR_ALL_ARG
        case numericJsonValueOutOfRange = 3155 // ER_NUMERIC_JSON_VALUE_OUT_OF_RANGE
        case invalidJsonValueForCast = 3156 // ER_INVALID_JSON_VALUE_FOR_CAST
        case jsonDocumentTooDeep = 3157 // ER_JSON_DOCUMENT_TOO_DEEP
        case jsonDocumentNullKey = 3158 // ER_JSON_DOCUMENT_NULL_KEY
        case secureTransportRequired = 3159 // ER_SECURE_TRANSPORT_REQUIRED
        case noSecureTransportsConfigured = 3160 // ER_NO_SECURE_TRANSPORTS_CONFIGURED
        case disabledStorageEngine = 3161 // ER_DISABLED_STORAGE_ENGINE
        case userDoesNotExist = 3162 // ER_USER_DOES_NOT_EXIST
        case userAlreadyExists = 3163 // ER_USER_ALREADY_EXISTS
        case auditApiAbort = 3164 // ER_AUDIT_API_ABORT
        case invalidJsonPathArrayCell = 3165 // ER_INVALID_JSON_PATH_ARRAY_CELL
        case bufpoolResizeInprogress = 3166 // ER_BUFPOOL_RESIZE_INPROGRESS
        case featureDisabledSeeDoc = 3167 // ER_FEATURE_DISABLED_SEE_DOC
        case serverIsntAvailable = 3168 // ER_SERVER_ISNT_AVAILABLE
        case sessionWasKilled = 3169 // ER_SESSION_WAS_KILLED
        case capacityExceeded = 3170 // ER_CAPACITY_EXCEEDED
        case capacityExceededInRangeOptimizer = 3171 // ER_CAPACITY_EXCEEDED_IN_RANGE_OPTIMIZER
        case tableNeedsUpgPart = 3172 // ER_TABLE_NEEDS_UPG_PART
        case cantWaitForExecutedGtidSetWhileOwningAGtid = 3173 // ER_CANT_WAIT_FOR_EXECUTED_GTID_SET_WHILE_OWNING_A_GTID
        case cannotAddForeignBaseColVirtual = 3174 // ER_CANNOT_ADD_FOREIGN_BASE_COL_VIRTUAL
        case cannotCreateVirtualIndexConstraint = 3175 // ER_CANNOT_CREATE_VIRTUAL_INDEX_CONSTRAINT
        case errorOnModifyingGtidExecutedTable = 3176 // ER_ERROR_ON_MODIFYING_GTID_EXECUTED_TABLE
        case lockRefusedByEngine = 3177 // ER_LOCK_REFUSED_BY_ENGINE
        case unsupportedAlterOnlineOnVirtualColumn = 3178 // ER_UNSUPPORTED_ALTER_ONLINE_ON_VIRTUAL_COLUMN
        case masterKeyRotationNotSupportedBySe = 3179 // ER_MASTER_KEY_ROTATION_NOT_SUPPORTED_BY_SE
        case masterKeyRotationErrorBySe = 3180 // ER_MASTER_KEY_ROTATION_ERROR_BY_SE
        case masterKeyRotationBinlogFailed = 3181 // ER_MASTER_KEY_ROTATION_BINLOG_FAILED
        case masterKeyRotationSeUnavailable = 3182 // ER_MASTER_KEY_ROTATION_SE_UNAVAILABLE
        case tablespaceCannotEncrypt = 3183 // ER_TABLESPACE_CANNOT_ENCRYPT
        case invalidEncryptionOption = 3184 // ER_INVALID_ENCRYPTION_OPTION
        case cannotFindKeyInKeyring = 3185 // ER_CANNOT_FIND_KEY_IN_KEYRING
        case capacityExceededInParser = 3186 // ER_CAPACITY_EXCEEDED_IN_PARSER
        case unsupportedAlterEncryptionInplace = 3187 // ER_UNSUPPORTED_ALTER_ENCRYPTION_INPLACE
        case keyringUdfKeyringServiceError = 3188 // ER_KEYRING_UDF_KEYRING_SERVICE_ERROR
        case userColumnOldLength = 3189 // ER_USER_COLUMN_OLD_LENGTH
        case cantResetMaster = 3190 // ER_CANT_RESET_MASTER
        case groupReplicationMaxGroupSize = 3191 // ER_GROUP_REPLICATION_MAX_GROUP_SIZE
        case cannotAddForeignBaseColStored = 3192 // ER_CANNOT_ADD_FOREIGN_BASE_COL_STORED
        case tableReferenced = 3193 // ER_TABLE_REFERENCED
     }
}

// MARK: Inits

extension MySQLError {
    public init(_ connection: Connection) {
        let raw = mysql_errno(connection.cConnection)

        let message: String
        if let error = mysql_error(connection.cConnection) {
            message = String(cString: error)
        } else {
            message = "Unknown"
        }

        self.init(
            rawCode: raw,
            reason: message
        )
    }

    public init(_ code: Code, reason: String) {
        self.code = code
        self.reason = reason
    }

    public init(rawCode: UInt32, reason: String) {
        self.code = Code(rawValue: rawCode) ?? .unknown
        self.reason = reason
    }
}

// MARK: Debuggable
import Debugging

extension MySQLError: Debuggable {
    public static var readableName: String {
        return "MySQL Error"
    }

    public var identifier: String {
        return "\(code.rawValue) (\(code))"
    }

    public var possibleCauses: [String] {
        switch code {
        case .serverGone, .serverLost, .serverLostExtended:
            return [
                "The connection to the server degraded during the query",
                "The connection has been open for too long",
                "Too much data has been sent through the connection"
            ]
        default:
            return []
        }
    }

    public var suggestedFixes: [String] {
        switch code {
        case .parseError:
            return [
                "Fix the invalid syntax in your query",
                "If an ORM has generated this error, report the issue to its GitHub page"
            ]
        case .serverGone, .serverLost, .serverLostExtended:
            return [
                "Increase the `wait_timeout`",
                "Increase the `max_allowed_packet`"
            ]
        case .noDefaultForField:
            return [
                "Make sure you are supplying a value for this column when serializing to the database"
            ]
        case .connection:
            return [
                "Make sure you have entered the correct username and password",
                "Make sure the database has been created"
            ]
        default:
            return []
        }
    }

    public var stackOverflowQuestions: [String] {
        switch code {
        case .parseError:
            return [
                "http://stackoverflow.com/questions/23515347/how-can-i-fix-mysql-error-1064"
            ]
        default:
            return []
        }
    }

    public var documentationLinks: [String] {
        return [
            "https://dev.mysql.com/doc/refman/5.7/en/error-messages-client.html",
            "https://dev.mysql.com/doc/refman/5.7/en/error-messages-server.html",
        ]
    }
}
